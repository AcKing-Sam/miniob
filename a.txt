diff --git a/src/observer/sql/executor/execute_stage.cpp b/src/observer/sql/executor/execute_stage.cpp
index 4e61b02..e85f5d4 100644
--- a/src/observer/sql/executor/execute_stage.cpp
+++ b/src/observer/sql/executor/execute_stage.cpp
@@ -16,7 +16,6 @@ See the Mulan PSL v2 for more details. */
 #include <string>
 
 #include "sql/executor/execute_stage.h"
-
 #include "common/log/log.h"
 #include "event/session_event.h"
 #include "event/sql_event.h"
@@ -41,6 +40,7 @@ RC ExecuteStage::handle_request(SQLStageEvent *sql_event)
   SessionEvent *session_event = sql_event->session_event();
 
   Stmt *stmt = sql_event->stmt();
+
   if (stmt != nullptr) {
     CommandExecutor command_executor;
     rc = command_executor.execute(sql_event);
diff --git a/src/observer/sql/expr/aggregator.cpp b/src/observer/sql/expr/aggregator.cpp
index 35d8573..1944bc5 100644
--- a/src/observer/sql/expr/aggregator.cpp
+++ b/src/observer/sql/expr/aggregator.cpp
@@ -45,3 +45,146 @@ RC SumAggregator::evaluate(Value& result)
   result = value_;
   return RC::SUCCESS;
 }
+
+RC MinAggregator::accumulate(const Value &value)
+{
+  if (value_.attr_type() == AttrType::UNDEFINED) {
+    value_ = value;
+    return RC::SUCCESS;
+  }
+  
+  ASSERT(value.attr_type() == value_.attr_type(), "type mismatch. value type: %s, value_.type: %s", 
+        attr_type_to_string(value.attr_type()), attr_type_to_string(value_.attr_type()));
+  
+  switch (value.attr_type())
+  {
+    case AttrType::INTS: {
+      value_.set_int(std::min(value.get_int(),value_.get_int()));
+    } break;
+    case AttrType::FLOATS: {
+      value_.set_float(std::min(value.get_float(),value_.get_float()));
+    } break;
+    case AttrType::CHARS: {
+      value_.set_string(std::min(value.get_string(), value_.get_string()).data());
+    } break;
+    case AttrType::DATES: {
+      value_.set_date(std::min(value.get_date(),value_.get_date()));
+    } break;
+    default: {
+      return RC::INTERNAL;
+    }
+  }
+  return RC::SUCCESS;
+}
+
+RC MinAggregator::evaluate(Value& result)
+{
+  result = value_;
+  return RC::SUCCESS;
+}
+
+RC MaxAggregator::accumulate(const Value &value)
+{
+  if (value_.attr_type() == AttrType::UNDEFINED) {
+    value_ = value;
+    return RC::SUCCESS;
+  }
+  
+  ASSERT(value.attr_type() == value_.attr_type(), "type mismatch. value type: %s, value_.type: %s", 
+        attr_type_to_string(value.attr_type()), attr_type_to_string(value_.attr_type()));
+  
+  switch (value.attr_type())
+  {
+    case AttrType::INTS: {
+      value_.set_int(std::max(value.get_int(),value_.get_int()));
+    } break;
+    case AttrType::FLOATS: {
+      value_.set_float(std::max(value.get_float(),value_.get_float()));
+    } break;
+    case AttrType::CHARS: {
+      value_.set_string(std::max(value.get_string(), value_.get_string()).data());
+    } break;
+    case AttrType::DATES: {
+      value_.set_date(std::max(value.get_date(),value_.get_date()));
+    } break;
+    default: {
+      return RC::INTERNAL;
+    }
+  }
+  return RC::SUCCESS;
+}
+
+RC MaxAggregator::evaluate(Value& result)
+{
+  result = value_;
+  return RC::SUCCESS;
+}
+
+RC AvgAggregator::accumulate(const Value &value)
+{
+  if (value_.attr_type() == AttrType::UNDEFINED) {
+    value_ = value;
+    return RC::SUCCESS;
+  }
+  
+  ASSERT(value.attr_type() == value_.attr_type(), "type mismatch. value type: %s, value_.type: %s", 
+        attr_type_to_string(value.attr_type()), attr_type_to_string(value_.attr_type()));
+  
+  switch (value.attr_type())
+  {
+    case AttrType::INTS: {
+      value_.set_int(value.get_int() + value_.get_int());
+    } break;
+    case AttrType::FLOATS: {
+      value_.set_float(value.get_float() + value_.get_float());
+    } break;
+    default: {
+      return RC::INTERNAL;
+    }
+  }
+  count_ ++;
+  return RC::SUCCESS;
+}
+
+RC AvgAggregator::evaluate(Value& result)
+{
+  switch (value_.attr_type())
+  {
+    case AttrType::INTS: {
+      int sum = value_.get_int();
+      if(sum % count_ == 0) {
+        result.set_int(value_.get_int() / count_);
+      } else {
+        result.set_type(AttrType::FLOATS);
+        result.set_float((float)value_.get_int() / count_);
+      }
+    } break;
+    case AttrType::FLOATS: {
+      result.set_float(value_.get_float() / count_);
+    } break;
+    default: {
+      return RC::INTERNAL;
+    }
+  }
+  return RC::SUCCESS;
+}
+
+RC CountAggregator::accumulate(const Value &value)
+{
+  if (value_.attr_type() == AttrType::UNDEFINED) {
+    value_ = value;
+    return RC::SUCCESS;
+  }
+  
+  ASSERT(value.attr_type() == value_.attr_type(), "type mismatch. value type: %s, value_.type: %s", 
+        attr_type_to_string(value.attr_type()), attr_type_to_string(value_.attr_type()));
+  
+  count_++;
+  return RC::SUCCESS;
+}
+
+RC CountAggregator::evaluate(Value& result)
+{
+  result.set_int(count_);
+  return RC::SUCCESS;
+}
diff --git a/src/observer/sql/expr/aggregator.h b/src/observer/sql/expr/aggregator.h
index 3b3ac74..c96dd20 100644
--- a/src/observer/sql/expr/aggregator.h
+++ b/src/observer/sql/expr/aggregator.h
@@ -34,4 +34,37 @@ class SumAggregator : public Aggregator
 public:
   RC accumulate(const Value &value) override;
   RC evaluate(Value &result) override;
+};
+
+class MinAggregator : public Aggregator
+{
+public:
+  RC accumulate(const Value &value) override;
+  RC evaluate(Value &result) override;
+};
+
+class MaxAggregator : public Aggregator
+{
+public:
+  RC accumulate(const Value &value) override;
+  RC evaluate(Value &result) override;
+};
+
+class AvgAggregator : public Aggregator
+{
+public:
+  RC accumulate(const Value &value) override;
+  RC evaluate(Value &result) override;
+
+private:
+  int count_ = 1;
+};
+
+class CountAggregator : public Aggregator
+{
+public:
+  RC accumulate(const Value &value) override;
+  RC evaluate(Value &result) override;
+private:
+  int count_ = 1;
 };
\ No newline at end of file
diff --git a/src/observer/sql/expr/expression.cpp b/src/observer/sql/expr/expression.cpp
index 0d5b453..52d5f2d 100644
--- a/src/observer/sql/expr/expression.cpp
+++ b/src/observer/sql/expr/expression.cpp
@@ -126,9 +126,31 @@ ComparisonExpr::ComparisonExpr(CompOp comp, unique_ptr<Expression> left, unique_
 
 ComparisonExpr::~ComparisonExpr() {}
 
+bool is_like(const char* text, const char* pattern) {
+    if (*pattern == '\0') {
+        return *text == '\0';
+    }
+    if (*pattern == '%') {
+        return is_like(text, pattern + 1) || (*text != '\0' && is_like(text + 1, pattern));
+    }
+    if (*pattern == '_' || *pattern == *text) {
+        return *text != '\0' && is_like(text + 1, pattern + 1);
+    }
+    return false;
+}
+
 RC ComparisonExpr::compare_value(const Value &left, const Value &right, bool &result) const
 {
   RC  rc         = RC::SUCCESS;
+
+  if(comp() == LIKE) {
+    result = is_like(left.data(), right.data()) || is_like(right.data(), left.data());
+    return rc;
+  } else if(comp() == NOT_LIKE) {
+    result = (!is_like(left.data(), right.data()) && !is_like(right.data(), left.data()));
+    return rc;
+  }
+
   int cmp_result = left.compare(right);
   result         = false;
   switch (comp_) {
@@ -592,6 +614,22 @@ unique_ptr<Aggregator> AggregateExpr::create_aggregator() const
       aggregator = make_unique<SumAggregator>();
       break;
     }
+    case Type::MIN: {
+      aggregator = make_unique<MinAggregator>();
+      break;
+    }
+    case Type::MAX: {
+      aggregator = make_unique<MaxAggregator>();
+      break;
+    }
+    case Type::AVG: {
+      aggregator = make_unique<AvgAggregator>();
+      break;
+    }
+    case Type::COUNT: {
+      aggregator = make_unique<CountAggregator>();
+      break;
+    }
     default: {
       ASSERT(false, "unsupported aggregate type");
       break;
diff --git a/src/observer/sql/operator/update_physical_operator.cpp b/src/observer/sql/operator/update_physical_operator.cpp
index de3971e..1fbb2b5 100644
--- a/src/observer/sql/operator/update_physical_operator.cpp
+++ b/src/observer/sql/operator/update_physical_operator.cpp
@@ -48,6 +48,11 @@ RC UpdatePhysicalOperator::open(Trx *trx)
                 if(field->field().meta()->type() != value_->attr_type()) {
                   return RC::INVALID_ARGUMENT;
                 }
+                if(value_->attr_type() == AttrType::CHARS) {
+                  if(value_->length() > field->field().meta()->len()) {
+                    return RC::INVALID_ARGUMENT;
+                  }
+                }
                 new_record.set_field(field->field().meta()->offset(), field->field().meta()->len(), (char *)value_->data());
                 break;
             }
@@ -65,7 +70,7 @@ RC UpdatePhysicalOperator::open(Trx *trx)
   // 记录的有效性由事务来保证，如果事务不保证删除的有效性，那说明此事务类型不支持并发控制，比如 VacuousTrx
   for (int i = 0;i < records_.size();i ++) {
     auto& record = records_[i];
-    auto new_record = new_records_[i];
+    auto& new_record = new_records_[i];
     rc = trx_->update_record(table_, record, new_record);
     if (rc != RC::SUCCESS) {
       LOG_WARN("failed to update record: %s", strrc(rc));
diff --git a/src/observer/sql/parser/expression_binder.cpp b/src/observer/sql/parser/expression_binder.cpp
index 2daf85c..1253144 100644
--- a/src/observer/sql/parser/expression_binder.cpp
+++ b/src/observer/sql/parser/expression_binder.cpp
@@ -408,6 +408,8 @@ RC ExpressionBinder::bind_aggregate_expression(
     return RC::SUCCESS;
   }
 
+  bool found = false;
+
   auto unbound_aggregate_expr = static_cast<UnboundAggregateExpr *>(expr.get());
   const char *aggregate_name = unbound_aggregate_expr->aggregate_name();
   AggregateExpr::Type aggregate_type;
@@ -420,7 +422,22 @@ RC ExpressionBinder::bind_aggregate_expression(
   unique_ptr<Expression>        &child_expr = unbound_aggregate_expr->child();
   vector<unique_ptr<Expression>> child_bound_expressions;
 
+  // corner cases:
+  // 1. child_expr is nullptr, e.g., SUM() ...
+  if(child_expr == nullptr) {
+    return RC::INVALID_ARGUMENT;
+  }
+  // 2. SUM(*) ...
+  if (child_expr->type() == ExprType::STAR && aggregate_type != AggregateExpr::Type::COUNT) {
+    return RC::INVALID_ARGUMENT;
+  }   
+
+  if(child_expr->type() == ExprType::STAR) {
+    found = true;
+  }
+
   if (child_expr->type() == ExprType::STAR && aggregate_type == AggregateExpr::Type::COUNT) {
+    // change COUNT(*) to COUNT(1) ...
     ValueExpr *value_expr = new ValueExpr(Value(1));
     child_expr.reset(value_expr);
   } else {
@@ -429,6 +446,8 @@ RC ExpressionBinder::bind_aggregate_expression(
       return rc;
     }
 
+    // 3. ERROR WITH REDUNDANT COLUMNS
+    // fixed below...
     if (child_bound_expressions.size() != 1) {
       LOG_WARN("invalid children number of aggregate expression: %d", child_bound_expressions.size());
       return RC::INVALID_ARGUMENT;
@@ -438,14 +457,29 @@ RC ExpressionBinder::bind_aggregate_expression(
       child_expr.reset(child_bound_expressions[0].release());
     }
   }
+  // 4. ERROR WITH NON-EXISTENT COLUMNS
+  for(auto t : binder_context().query_tables()) {
+    for(auto fm : *t->table_meta().field_metas()) {
+      if(strcmp(fm.name(), child_expr->name()) == 0) {
+        found = true;
+        break;
+      }
+    }
+  }
+  if(!found) {
+    return RC::INVALID_ARGUMENT;
+  }
 
   auto aggregate_expr = make_unique<AggregateExpr>(aggregate_type, std::move(child_expr));
   aggregate_expr->set_name(unbound_aggregate_expr->name());
+    
   rc = check_aggregate_expression(*aggregate_expr);
   if (OB_FAIL(rc)) {
     return rc;
   }
 
   bound_expressions.emplace_back(std::move(aggregate_expr));
+
+  
   return RC::SUCCESS;
 }
diff --git a/src/observer/sql/parser/expression_binder.h b/src/observer/sql/parser/expression_binder.h
index d52f049..9e4a052 100644
--- a/src/observer/sql/parser/expression_binder.h
+++ b/src/observer/sql/parser/expression_binder.h
@@ -45,7 +45,7 @@ public:
   virtual ~ExpressionBinder() = default;
 
   RC bind_expression(std::unique_ptr<Expression> &expr, std::vector<std::unique_ptr<Expression>> &bound_expressions);
-
+  BinderContext& binder_context() { return context_; }
 private:
   RC bind_star_expression(
       std::unique_ptr<Expression> &star_expr, std::vector<std::unique_ptr<Expression>> &bound_expressions);
diff --git a/src/observer/sql/parser/lex_sql.cpp b/src/observer/sql/parser/lex_sql.cpp
index b2eb395..685bd7b 100644
--- a/src/observer/sql/parser/lex_sql.cpp
+++ b/src/observer/sql/parser/lex_sql.cpp
@@ -386,8 +386,8 @@ static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );
 	yyg->yy_hold_char = *yy_cp; \
 	*yy_cp = '\0'; \
 	yyg->yy_c_buf_p = yy_cp;
-#define YY_NUM_RULES 63
-#define YY_END_OF_BUFFER 64
+#define YY_NUM_RULES 70
+#define YY_END_OF_BUFFER 71
 /* This struct is not used in this scanner,
    but its presence is necessary. */
 struct yy_trans_info
@@ -395,30 +395,32 @@ struct yy_trans_info
 	flex_int32_t yy_verify;
 	flex_int32_t yy_nxt;
 	};
-static const flex_int16_t yy_accept[198] =
+static const flex_int16_t yy_accept[221] =
     {   0,
-        0,    0,    0,    0,   64,   62,    1,    2,   62,   62,
-       62,   46,   47,   58,   56,   48,   57,    7,   59,    3,
-        6,   53,   49,   55,   45,   45,   45,   45,   45,   45,
-       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
-       45,   45,   63,   52,    0,   60,    0,   61,    0,    3,
-        0,   50,   51,   54,   45,   45,   45,   45,   42,   45,
-       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
-       45,   45,   45,   45,   16,   45,   45,   45,   45,   45,
-       45,   45,   45,   45,    0,    4,   23,   45,   45,   45,
-       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
-
-       45,   45,   45,   45,   45,   45,   33,   45,   45,   45,
-       29,   45,   45,   45,   45,   45,   45,   45,    0,   45,
-       20,   34,   45,   45,   38,   36,   45,   10,   12,    8,
-       45,   45,   45,   21,   45,    9,   45,   45,   45,   25,
-       37,   45,   45,   17,   45,   18,   45,   45,   45,   45,
-        0,   30,   45,   45,   45,   45,   35,   45,   41,   15,
-       45,   45,   45,   45,   45,   13,   45,   45,   22,    0,
-       31,   11,   27,   45,   44,   39,   24,   45,   19,   45,
-       14,   28,   26,    0,    0,    0,   40,   45,   43,    0,
-       32,    0,    0,    0,    0,    5,    0
-
+        0,    0,    0,    0,   71,   69,    1,    2,   69,   69,
+       69,   53,   54,   65,   63,   55,   64,    7,   66,    3,
+        6,   60,   56,   62,   52,   52,   52,   52,   52,   52,
+       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
+       52,   52,   52,   52,   70,   59,    0,   67,    0,   68,
+        0,    3,    0,   57,   58,   61,   52,   52,   52,   52,
+       52,   49,   52,   52,   52,   52,   52,   52,   52,   52,
+       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
+       52,   23,   52,   52,   52,   52,   52,   52,   52,   52,
+       52,   52,    0,    4,   30,   11,   52,   52,   52,   52,
+
+       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
+       52,   52,   52,   52,   52,   52,   40,   52,   52,   10,
+        9,   52,   52,   52,   36,   52,   52,    8,   52,   52,
+       52,   52,   52,    0,   52,   27,   41,   52,   52,   52,
+       45,   43,   52,   17,   19,   15,   52,   52,   52,   28,
+       52,   16,   52,   52,   52,   32,   13,   44,    0,   52,
+       52,   24,   52,   25,   52,   52,   52,   52,    0,   37,
+       52,   12,   52,   52,   52,   42,   52,   48,   22,   52,
+       52,    0,   52,   52,   52,   20,   52,   52,   29,    0,
+       38,   18,   34,   52,   51,   46,   31,    0,   52,   26,
+
+       52,   21,   35,   33,    0,    0,    0,   47,    0,   52,
+       50,    0,   14,   39,    0,    0,    0,    0,    5,    0
     } ;
 
 static const YY_CHAR yy_ec[256] =
@@ -426,17 +428,17 @@ static const YY_CHAR yy_ec[256] =
         1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
         1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    2,    4,    5,    1,    1,    1,    1,    6,    7,
-        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
-       18,   19,   19,   19,   19,   19,   19,    1,   20,   21,
-       22,   23,    1,    1,   24,   25,   26,   27,   28,   29,
-       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
-       33,   40,   41,   42,   43,   44,   45,   46,   47,   33,
-        1,    1,    1,    1,   33,    1,   48,   49,   50,   51,
-
-       52,   53,   54,   55,   56,   33,   57,   58,   59,   60,
-       61,   62,   33,   63,   64,   65,   66,   67,   68,   69,
-       70,   33,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    4,    5,    6,    1,    1,    1,    1,    7,    8,
+        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
+       19,   20,   20,   20,   20,   20,   20,    1,   21,   22,
+       23,   24,    1,    1,   25,   26,   27,   28,   29,   30,
+       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
+       34,   41,   42,   43,   44,   45,   46,   47,   48,   34,
+        1,    1,    1,    1,   34,    1,   49,   50,   51,   52,
+
+       53,   54,   55,   56,   57,   34,   58,   59,   60,   61,
+       62,   63,   34,   64,   65,   66,   67,   68,   69,   70,
+       71,   34,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
@@ -453,258 +455,283 @@ static const YY_CHAR yy_ec[256] =
         1,    1,    1,    1,    1
     } ;
 
-static const YY_CHAR yy_meta[71] =
+static const YY_CHAR yy_meta[72] =
     {   0,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    2,    2,    2,    2,    2,    1,
-        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
+        1,    1,    1,    1,    1,    2,    2,    2,    2,    2,
+        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
+        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
         2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
         2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
         2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
-        2,    2,    2,    2,    2,    2,    2,    2,    2,    2
+        2
     } ;
 
-static const flex_int16_t yy_base[203] =
+static const flex_int16_t yy_base[226] =
     {   0,
-        0,    0,    0,    0,  128, 1583, 1583, 1583,  105,  112,
-       65, 1583, 1583, 1583, 1583, 1583,   57, 1583, 1583,   72,
-     1583,   55, 1583,   90,   77,   82,  138,   78,  104,  137,
-      127,  187,  192,  164,  202,  207,  215,  262,  240,  230,
-      267,  256, 1583, 1583,  103, 1583,   98, 1583,  283,  303,
-      318, 1583, 1583, 1583,    0,  323,  328,  333,  341,  349,
-      354,  373,  378,  395,  400,  405,  429,  434,  458,  463,
-      471,  487,  531,  495,  410,  518,  546,  551,  575,  582,
-      590,  605,  610,  523,  510,  631,  636,  642,  647,  660,
-      665,  670,  687,  710,  715,  727,  732,  737,  752,  742,
-
-      766,  775,  788,  793,  798,  816,  821,  845,  858,  869,
-      883,  888,  894,  909,  923,  928,  945,  950,  967,  977,
-      982,  987, 1000, 1005, 1010, 1023, 1033, 1042, 1047, 1061,
-     1066, 1076, 1084, 1094, 1104, 1109, 1118, 1130, 1135, 1140,
-     1152, 1161, 1166, 1178, 1184, 1196, 1202, 1207, 1218, 1223,
-       99, 1240, 1245, 1250, 1264, 1279, 1288, 1302, 1307, 1312,
-     1321, 1335, 1340, 1353, 1363, 1368, 1386, 1404, 1409, 1424,
-     1418, 1431, 1436, 1441, 1446, 1454, 1464, 1469, 1474, 1481,
-     1487, 1495, 1505,  289,  704,  101, 1510, 1519, 1524, 1539,
-     1531,  307, 1545,  109,   97, 1583, 1583, 1576, 1578, 1580,
-
-       84,   77
+        0,    0,    0,    0,  139, 1767, 1767, 1767,  114,  130,
+       65, 1767, 1767, 1767, 1767, 1767,   57, 1767, 1767,   72,
+     1767,   55, 1767,  110,   77,   82,  138,   78,  131,  149,
+      148,  198,  203,  212,  217,  227,  249,  274,  279,  326,
+      284,  297,  303,  331, 1767, 1767,  123, 1767,  114, 1767,
+      382,  348,  387, 1767, 1767, 1767,    0,  392,  397,  402,
+      410,  418,  426,  434,  450,  455,  460,  473,  479,  503,
+      511,  528,  535,  545,  559,  603,  569,  583,  593,  618,
+      631,  642,  664,  669,  674,  690,  700,  723,  728,  739,
+      714,  746,  763,  769,  776,  784,  789,  794,  799,  807,
+
+      812,  817,  835,  852,  858,  873,  878,  883,  898,  908,
+      913,  921,  935,  940,  961,  966,  983,  988,  995, 1008,
+     1013, 1032, 1037, 1042, 1047, 1058, 1064, 1069, 1074, 1090,
+     1095, 1113, 1118, 1134, 1145, 1150, 1155, 1168, 1173, 1178,
+     1191, 1210, 1215, 1229, 1234, 1243, 1248, 1258, 1266, 1276,
+     1286, 1291, 1300, 1312, 1317, 1322, 1334, 1343,   69, 1348,
+     1359, 1371, 1376, 1386, 1395, 1400, 1410, 1415,   99, 1433,
+     1438, 1453, 1458, 1466, 1472, 1480, 1490, 1496, 1504, 1518,
+     1523,   47, 1532, 1542, 1556, 1574, 1580, 1585, 1601, 1606,
+     1612, 1618, 1624, 1629, 1635, 1640, 1645,   74, 1652, 1657,
+
+     1664, 1669, 1678, 1688,  106,  179,  101, 1693,   91, 1702,
+     1707, 1722, 1767, 1714,  263, 1728,  145,  111, 1767, 1767,
+     1760, 1762, 1764,  114,   85
     } ;
 
-static const flex_int16_t yy_def[203] =
+static const flex_int16_t yy_def[226] =
     {   0,
-      197,    1,  198,  198,  197,  197,  197,  197,  197,  199,
-      200,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  201,  201,  201,   27,  201,   27,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      201,  201,  197,  197,  199,  197,  200,  197,  200,  197,
-      197,  197,  197,  197,  202,  201,  201,  201,  201,  201,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      201,  201,  201,  201,  200,  197,  201,  201,  201,  201,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      201,  201,  201,  201,  201,  201,  201,  201,  200,  201,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      200,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  200,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      201,  201,  201,  200,  200,  200,  201,  201,  201,  200,
-      201,  200,  200,  200,  200,  197,    0,  197,  197,  197,
-
-      197,  197
+      220,    1,  221,  221,  220,  220,  220,  220,  220,  222,
+      223,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  224,  224,  224,   27,  224,   27,
+      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
+      224,  224,  224,  224,  220,  220,  222,  220,  223,  220,
+      223,  220,  220,  220,  220,  220,  225,  224,  224,  224,
+      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
+      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
+      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
+      224,  224,  223,  220,  224,  224,  224,  224,  224,  224,
+
+      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
+      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
+      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
+      224,  224,  224,  223,  224,  224,  224,  224,  224,  224,
+      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
+      224,  224,  224,  224,  224,  224,  224,  224,  220,  224,
+      224,  224,  224,  224,  224,  224,  224,  224,  223,  224,
+      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
+      224,  220,  224,  224,  224,  224,  224,  224,  224,  223,
+      224,  224,  224,  224,  224,  224,  224,  220,  224,  224,
+
+      224,  224,  224,  224,  223,  223,  223,  224,  220,  224,
+      224,  223,  220,  224,  223,  223,  223,  223,  220,    0,
+      220,  220,  220,  220,  220
     } ;
 
-static const flex_int16_t yy_nxt[1654] =
+static const flex_int16_t yy_nxt[1839] =
     {   0,
-        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
-       16,   17,   18,   19,   20,   20,   20,   20,   20,   21,
-       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
-       32,   33,   34,   34,   35,   34,   34,   36,   34,   37,
-       38,   39,   40,   41,   42,   34,   34,   25,   26,   27,
-       28,   29,   30,   31,   32,   33,   34,   35,   34,   34,
-       36,   34,   37,   38,   39,   40,   41,   42,   34,   34,
-       48,   50,   50,   50,   50,   50,   52,   53,   55,   49,
-       49,   49,   49,   49,   51,   56,   50,   50,   50,   50,
-       50,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-
-       55,   64,  196,   48,   48,   65,   48,   46,   56,   58,
-      170,   54,  190,   57,  196,   56,   46,   66,   55,   55,
-       55,   55,   55,  195,  195,   64,   44,  197,   59,   65,
-      197,  197,   56,   58,  197,  197,   57,  197,   56,  197,
-       66,   55,   55,   55,   55,   55,  197,  197,  197,   67,
-      197,   59,   55,   55,   55,   55,   55,  197,  197,  197,
-       56,   60,  197,  197,  197,  197,   71,   56,   61,  197,
-      197,   68,   67,  197,   69,   62,   70,   63,   55,   55,
-       55,   55,   55,  197,   56,   60,  197,  197,  197,   71,
-      197,   56,   61,  197,   68,  197,  197,   69,   62,   70,
-
-       63,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,  197,  197,  197,   72,  197,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,  197,  197,   73,   55,
-       55,   55,   55,   55,  197,  197,  197,  197,   72,   74,
-      197,  197,  197,   75,   55,   55,   55,   55,   55,  197,
-      197,   73,   76,  197,   55,   55,   55,   55,   55,  197,
-      197,  197,   74,   81,  197,  197,   75,  197,   82,  197,
-       55,   55,   55,   55,   55,   76,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   84,   81,   48,   77,
-       83,   82,   78,  197,   48,  197,  197,   85,   85,   85,
-
-       85,   85,  197,   79,  186,  186,  186,  186,   80,  197,
-       84,  197,   48,   77,   83,   51,   78,   50,   50,   50,
-       50,   50,  195,  195,  195,  195,   79,  197,  197,  197,
-      197,   80,   86,   86,   86,   86,   86,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,  197,  197,   87,   55,   55,   55,   55,   55,
-      197,  197,   88,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,  197,  197,  197,  197,   90,   87,  197,
-      197,  197,  197,   89,  197,  197,   88,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,  197,  197,  197,
-
-      197,   90,  197,  197,  197,   92,   89,  197,   91,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,   92,
-      197,   91,  197,  197,   94,  197,   93,  197,  197,  197,
-       95,  197,   96,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,  197,  197,  197,  197,   94,  197,   93,
-       97,  197,  197,   95,  197,   96,  197,   98,  197,  197,
-      197,   99,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,  197,  197,   97,   55,   55,   55,   55,   55,
-       98,  197,  197,  197,   99,  197,  197,  100,  197,  197,
-
-      101,   55,   55,   55,   55,   55,  197,  197,  102,   55,
-       55,   55,   55,   55,  197,   48,  197,  197,  108,  197,
-      100,  103,  197,  101,  119,  119,  119,  119,  119,  197,
-      197,  102,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,  108,  197,  103,   55,   55,   55,   55,   55,
-      118,  197,  109,  197,  197,  197,  197,  104,  197,  105,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-      197,  106,  107,  197,  118,  109,  197,  197,  197,  197,
-      110,  104,  197,  105,  197,  197,  197,  111,  112,   55,
-       55,   55,   55,   55,  106,  107,   55,   55,   55,   55,
-
-       55,  197,  197,  110,   55,   55,   55,   55,   55,  197,
-      111,  112,  113,  197,  115,  197,  197,  197,  114,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,  197,
-      197,  116,  197,  197,  197,  113,  197,  197,  115,  197,
-      197,  114,  197,  197,  117,   86,   86,   86,   86,   86,
-       55,   55,   55,   55,   55,  116,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,  197,  117,  197,  197,
-      197,  197,  121,  120,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,  197,
-      197,  197,  197,  124,  197,  197,  121,  120,  197,  122,
-
-      123,   55,   55,   55,   55,   55,  197,  197,  197,   48,
-      125,  197,  197,  197,  126,  190,  197,  124,  186,  186,
-      186,  197,  122,  123,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,  125,  197,  197,  127,  126,  197,
-      128,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,  127,  197,  197,  128,  129,   55,   55,   55,   55,
-       55,  131,  197,  130,  197,  132,  197,  133,  197,  197,
-       55,   55,   55,   55,   55,  197,  197,  197,  129,   55,
-       55,   55,   55,   55,  131,  197,  130,  197,  197,  132,
-
-      133,  134,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,  135,  197,  197,
-      137,  197,  197,  197,  134,  197,  136,  197,  197,  138,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-      135,  197,  197,  139,  137,  197,  197,  197,  197,  136,
-      197,  197,  197,  138,  197,  197,  197,  197,  140,   55,
-       55,   55,   55,   55,  197,  197,  197,  139,  197,  197,
-      197,  141,   55,   55,   55,   55,   55,  197,  197,  197,
-      197,  140,  197,   55,   55,   55,   55,   55,  197,  197,
-      197,  197,  142,  197,  197,  141,  143,   55,   55,   55,
-
-       55,   55,   55,   55,   55,   55,   55,  197,   55,   55,
-       55,   55,   55,  197,  197,  142,  197,  197,  197,  197,
-      143,  197,  197,   55,   55,   55,   55,   55,  197,  197,
-      197,  197,  144,  145,  146,  197,  197,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,  197,  197,  197,
-      197,  148,  197,  197,  197,  144,  145,  147,  146,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,  197,
-      197,  197,   48,  197,  197,  148,  197,  197,  197,  197,
-      147,  151,  151,  151,  151,  151,  197,  149,  197,  150,
-      197,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-
-       55,   55,   55,   55,   55,   55,  197,  197,  197,  197,
-      149,  197,  150,  152,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,  197,
-      197,  153,  197,  197,  197,  197,  152,   55,   55,   55,
-       55,   55,  197,  197,  197,  197,  154,   55,   55,   55,
-       55,   55,  197,  197,  197,  153,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,  197,  197,  197,  154,
-      197,  197,  197,  197,  155,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,  197,  197,  197,  197,  156,
-       55,   55,   55,   55,   55,  197,  197,  155,   55,   55,
-
-       55,   55,   55,  197,  197,  197,  197,  158,   55,   55,
-       55,   55,   55,  156,  197,  197,  197,  157,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,  197,  197,
-      197,  158,   55,   55,   55,   55,   55,  197,  197,  197,
-      157,  197,  159,  197,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,  197,
-      197,  197,  197,  160,  161,  159,   55,   55,   55,   55,
-       55,  197,  197,  197,  162,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,  163,  160,  161,  197,  197,
-      197,  164,   55,   55,   55,   55,   55,  162,   55,   55,
-
-       55,   55,   55,  197,  197,  197,  197,  165,  197,  163,
-       55,   55,   55,   55,   55,  164,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,  197,  197,  197,  166,
-      197,  165,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,  197,  197,  197,  168,  197,  197,  167,  197,
-      169,  197,  197,  166,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,  168,
-      197,  167,  197,  197,  169,  197,  197,  172,   55,   55,
-       55,   55,   55,  197,  197,  197,  171,  197,  197,  197,
-      197,  173,  197,   55,   55,   55,   55,   55,  197,  197,
-
-      197,  172,   55,   55,   55,   55,   55,  197,  197,  171,
-      174,  197,  197,  197,  197,  173,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,  197,  197,  197,  174,   55,   55,   55,   55,   55,
-      197,  197,  197,  175,  197,  197,  197,  197,  176,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,  197,
-      197,  197,  197,  178,  197,  197,  175,   55,   55,   55,
-       55,   55,  176,  197,  197,  197,  177,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,  178,  197,  197,
-      197,  197,  180,  197,  179,  197,  197,  197,  197,  177,
-
-       55,   55,   55,   55,   55,  197,  197,  197,  181,  197,
-      197,  197,  197,  182,  197,  197,  180,  179,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,  197,   48,
-      197,  181,   55,   55,   55,   55,   55,  182,  184,  185,
-      186,  186,  186,  197,  183,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,   55,   55,  197,  197,  183,   55,   55,
-       55,   55,   55,  197,  197,  197,  197,  187,   55,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,  197,  188,   55,   55,   55,   55,   55,
-
-      187,   55,   55,   55,   55,   55,  197,  197,  189,   55,
-       55,   55,   55,   55,  197,  197,  197,  197,  188,   55,
-       55,   55,   55,   55,   55,   55,   55,   55,   55,  197,
-      197,  197,  189,   55,   55,   55,   55,   55,   55,   55,
-       55,   55,   55,  197,   48,   55,   55,   55,   55,   55,
-      196,  197,  191,  192,  193,  193,  194,  195,  197,  195,
-      195,  195,  195,  195,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  191,   43,   43,   45,   45,
-       47,   47,    5,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197
+        6,    7,    8,    7,    9,   10,   11,   12,   13,   14,
+       15,   16,   17,   18,   19,   20,   20,   20,   20,   20,
+       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
+       31,   32,   33,   34,   34,   35,   36,   37,   38,   34,
+       39,   40,   41,   42,   43,   44,   34,   34,   25,   26,
+       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
+       37,   38,   34,   39,   40,   41,   42,   43,   44,   34,
+       34,   50,   52,   52,   52,   52,   52,   54,   55,  198,
+       51,   51,   51,   51,   51,   53,   57,   52,   52,   52,
+       52,   52,   57,   57,   57,   57,   57,   57,   57,   57,
+
+       57,   57,   67,  198,  182,   50,   68,   50,  209,   58,
+       61,  190,   50,  212,   59,   58,   58,  219,   69,  213,
+       50,   60,  207,  207,  207,  207,   67,  182,   48,   62,
+       68,  209,   56,   58,   61,   48,   46,   59,  220,   58,
+      220,   69,  220,  213,   60,  220,   57,   57,   57,   57,
+       57,  219,   62,   57,   57,   57,   57,   57,  220,  220,
+      218,  218,   63,   57,   57,   57,   57,   57,  220,   64,
+      220,  220,  220,   58,  220,  220,   65,   70,   66,  220,
+       58,  220,  220,  220,   71,   50,   63,   72,   74,   73,
+      220,  212,  220,   64,  207,  207,  207,   58,  220,   65,
+
+       70,   66,  220,  220,   58,  220,  220,   71,  220,  220,
+       72,   74,   73,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,  220,  220,  220,   75,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,  220,  220,  220,
+       76,  220,   57,   57,   57,   57,   57,  220,  220,   77,
+       75,   79,  220,  220,  220,   78,  220,  220,  220,   80,
+      220,  220,  220,   76,   57,   57,   57,   57,   57,   50,
+      220,  220,  220,   77,  220,   79,  220,  220,   78,  218,
+      218,  218,  218,   80,  220,  220,  220,   81,  220,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+
+       57,   57,   57,   57,  220,  220,  220,  220,   89,  220,
+       81,   82,   57,   57,   57,   57,   57,   83,   57,   57,
+       57,   57,   57,  220,  220,  220,  220,   91,  220,  220,
+      220,  220,   89,  220,   82,  220,   90,  220,  220,  220,
+       83,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   91,  220,  220,   84,  220,  220,   85,  220,   90,
+      220,   53,   92,   52,   52,   52,   52,   52,   86,   87,
+      220,  220,  220,   88,  220,  220,  220,  220,   84,  220,
+      220,   85,  220,  220,  220,  220,   92,  220,   50,  220,
+      220,   86,   87,  220,  220,  220,   88,   93,   93,   93,
+
+       93,   93,   94,   94,   94,   94,   94,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,  220,  220,   95,   57,   57,   57,   57,   57,
+      220,  220,   96,   57,   57,   57,   57,   57,  220,  220,
+       97,   57,   57,   57,   57,   57,  220,  220,   95,   57,
+       57,   57,   57,   57,  220,  220,   96,  220,   99,  220,
+      220,   98,  220,  220,   97,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+      220,  220,   99,  102,   98,  220,  100,  220,   57,   57,
+       57,   57,   57,  101,   57,   57,   57,   57,   57,  220,
+
+      220,  220,  103,  220,  220,  220,  220,  102,  104,  100,
+      220,  220,  220,  220,  105,  220,  101,  106,   57,   57,
+       57,   57,   57,  220,  220,  103,   57,   57,   57,   57,
+       57,  104,  220,  220,  220,  107,  220,  105,  220,  220,
+      106,  220,  108,   57,   57,   57,   57,   57,  220,  109,
+       57,   57,   57,   57,   57,  220,  220,  220,  220,  107,
+       57,   57,   57,   57,   57,  108,  220,  220,  110,  220,
+      220,  220,  109,  111,   57,   57,   57,   57,   57,  220,
+      220,  220,  220,  112,   57,   57,   57,   57,   57,  220,
+      220,  110,  220,  220,  113,  220,  111,  220,   57,   57,
+
+       57,   57,   57,  118,  220,  220,  112,  119,   57,   57,
+       57,   57,   57,  220,  220,  220,  220,  113,   57,   57,
+       57,   57,   57,  220,  220,  220,  118,  220,  220,  220,
+      114,  119,  115,   57,   57,   57,   57,   57,  220,  120,
+      220,  220,  220,  220,  116,  117,   57,   57,   57,   57,
+       57,  220,  220,  220,  114,  121,  115,   57,   57,   57,
+       57,   57,  120,  220,  220,  220,  220,  116,  117,  220,
+      220,  220,  220,  122,  220,  220,  220,  220,  121,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,  220,  220,  122,  220,  220,  123,
+
+      220,  220,  220,  220,  124,   57,   57,   57,   57,   57,
+      220,  125,  126,  220,  220,   57,   57,   57,   57,   57,
+      220,  220,  123,  220,  220,  220,  220,  124,  127,   57,
+       57,   57,   57,   57,  125,  126,  128,  220,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,  220,  132,
+      220,  127,  220,  130,   57,   57,   57,   57,   57,  128,
+      129,   57,   57,   57,   57,   57,  131,  220,  220,   50,
+      220,  220,  132,  220,  133,  220,  220,  130,  134,  134,
+      134,  134,  134,  129,   94,   94,   94,   94,   94,  220,
+      131,   57,   57,   57,   57,   57,  220,  220,  133,   57,
+
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,  220,
+      136,  135,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,  220,  220,  137,
+      220,  140,  220,  138,  136,  135,  220,  220,  220,  139,
+       57,   57,   57,   57,   57,  220,  220,  220,  220,  141,
+      220,  220,  137,  142,  220,  140,  138,   57,   57,   57,
+       57,   57,  139,   57,   57,   57,   57,   57,  220,  220,
+      143,  220,  220,  141,  144,  220,  220,  142,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+
+       57,   57,   57,  220,  143,  220,  220,  220,  144,  220,
+      220,  220,  145,   57,   57,   57,   57,   57,  147,  220,
+      146,  220,  148,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,  220,  220,  145,   57,   57,   57,   57,
+       57,  147,  220,  146,  149,  220,  148,  220,  220,  150,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+      220,  220,  220,  220,  151,  220,  220,  149,  153,  220,
+      220,  220,  150,  220,  152,  220,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,  220,  151,  220,  220,
+      220,  220,  153,  154,  155,  220,  220,  152,   57,   57,
+
+       57,   57,   57,   57,   57,   57,   57,   57,  220,  220,
+       57,   57,   57,   57,   57,  220,  157,  154,  155,  220,
+      220,  156,  158,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,  220,  220,  159,  220,  220,  220,  220,
+      157,  220,  220,  220,  156,  220,  158,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,  220,  220,  220,
+      161,  220,  160,   57,   57,   57,   57,   57,  220,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,  161,  160,  220,  220,  220,  220,
+
+      164,  220,  220,  162,  163,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,  220,  220,  220,  220,  166,
+      220,  220,  220,  220,  164,  165,  162,  163,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,  220,  220,
+       50,  220,  220,  166,  220,  220,  220,  220,  165,  169,
+      169,  169,  169,  169,  220,  220,  167,  220,  168,  220,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,  220,  220,  220,  220,  167,
+      220,  168,  170,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,  220,  220,
+
+      171,  220,  220,  220,  220,  170,   57,   57,   57,   57,
+       57,  220,  220,  220,  220,  172,  220,  220,  220,  220,
+      173,  220,  220,  220,  171,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,  220,  220,  220,  172,  220,
+      220,  220,  220,  173,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,  220,  220,  220,  174,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,  220,  220,
+      220,  220,  175,   57,   57,   57,   57,   57,  220,  220,
+      174,   57,   57,   57,   57,   57,  220,  220,  220,  220,
+      177,   57,   57,   57,   57,   57,  175,  220,  220,  220,
+
+      176,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,  220,  220,  220,  177,   57,   57,   57,   57,   57,
+      220,  220,  220,  176,  220,  178,  220,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,  220,  220,  220,  220,  179,  180,  178,   57,
+       57,   57,   57,   57,  220,  220,  220,  181,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,  220,  179,
+      180,  220,  220,  183,   57,   57,   57,   57,   57,  220,
+      181,  220,  220,  220,  220,  184,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,  220,  183,  220,  220,
+
+      185,   57,   57,   57,   57,   57,  220,  220,  220,  184,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+      220,  220,  220,  186,  185,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,  220,  220,  220,  188,  220,
+      220,  220,  187,  189,  220,  220,  220,  186,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,  220,  220,
+      220,  220,  188,  220,  220,  187,  220,  189,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,  220,  220,
+      191,   57,   57,   57,   57,   57,  192,   57,   57,   57,
+       57,   57,  220,  220,  193,   57,   57,   57,   57,   57,
+
+      220,  220,  220,  191,  194,   57,   57,   57,   57,   57,
+      192,   57,   57,   57,   57,   57,  220,  220,  193,   57,
+       57,   57,   57,   57,  220,  220,  220,  220,  194,  220,
+      220,  220,  195,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,  220,  220,  220,  196,   57,   57,   57,
+       57,   57,  220,  220,  220,  195,  199,   57,   57,   57,
+       57,   57,  220,  220,  220,  197,  220,  220,  220,  220,
+      196,   57,   57,   57,   57,   57,  220,  220,  220,  220,
+      199,  220,  220,  220,  200,  220,  201,  220,  197,   57,
+       57,   57,   57,   57,  220,   57,   57,   57,   57,   57,
+
+       57,   57,   57,   57,   57,  220,  220,  200,  203,  220,
+      201,  220,   50,  220,  220,  202,   57,   57,   57,   57,
+       57,  205,  206,  207,  207,  207,  204,   57,   57,   57,
+       57,   57,  203,   57,   57,   57,   57,   57,  202,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,  204,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   57,   57,  220,  208,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,  220,  210,   57,
+       57,   57,   57,   57,   57,   57,   57,   57,   57,  208,
+      220,  220,  211,   57,   57,   57,   57,   57,  220,  220,
+
+      220,  220,  210,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,  220,  220,  220,  211,   57,   57,   57,
+       57,   57,   57,   57,   57,   57,   57,  220,   50,   57,
+       57,   57,   57,   57,  219,  220,  214,  215,  216,  216,
+      217,  218,  220,  218,  218,  218,  218,  218,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  214,
+       45,   45,   47,   47,   49,   49,    5,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220
     } ;
 
-static const flex_int16_t yy_chk[1654] =
+static const flex_int16_t yy_chk[1839] =
     {   0,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
@@ -713,181 +740,201 @@ static const flex_int16_t yy_chk[1654] =
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
         1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-       11,   17,   17,   17,   17,   17,   22,   22,  202,   11,
-       11,   11,   11,   11,   20,  201,   20,   20,   20,   20,
-       20,   25,   25,   25,   25,   25,   26,   26,   26,   26,
-
-       26,   28,  195,   47,  151,   28,  186,   45,   28,   26,
-      151,   24,  186,   25,  194,   28,   10,   28,   29,   29,
-       29,   29,   29,  194,  194,   28,    9,    5,   26,   28,
-        0,    0,   28,   26,    0,    0,   25,    0,   28,    0,
-       28,   31,   31,   31,   31,   31,    0,    0,    0,   29,
-        0,   26,   27,   27,   27,   27,   27,    0,    0,    0,
-       30,   27,    0,    0,    0,    0,   31,   30,   27,    0,
-        0,   30,   29,    0,   30,   27,   30,   27,   34,   34,
-       34,   34,   34,    0,   30,   27,    0,    0,    0,   31,
-        0,   30,   27,    0,   30,    0,    0,   30,   27,   30,
-
-       27,   32,   32,   32,   32,   32,   33,   33,   33,   33,
-       33,    0,    0,    0,   32,    0,   35,   35,   35,   35,
-       35,   36,   36,   36,   36,   36,    0,    0,   33,   37,
-       37,   37,   37,   37,    0,    0,    0,    0,   32,   35,
-        0,    0,    0,   36,   40,   40,   40,   40,   40,    0,
-        0,   33,   37,    0,   39,   39,   39,   39,   39,    0,
-        0,    0,   35,   39,    0,    0,   36,    0,   40,    0,
-       42,   42,   42,   42,   42,   37,   38,   38,   38,   38,
-       38,   41,   41,   41,   41,   41,   42,   39,   49,   38,
-       41,   40,   38,    0,  184,    0,    0,   49,   49,   49,
-
-       49,   49,    0,   38,  184,  184,  184,  184,   38,    0,
-       42,    0,  192,   38,   41,   50,   38,   50,   50,   50,
-       50,   50,  192,  192,  192,  192,   38,    0,    0,    0,
-        0,   38,   51,   51,   51,   51,   51,   56,   56,   56,
-       56,   56,   57,   57,   57,   57,   57,   58,   58,   58,
-       58,   58,    0,    0,   57,   59,   59,   59,   59,   59,
-        0,    0,   58,   60,   60,   60,   60,   60,   61,   61,
-       61,   61,   61,    0,    0,    0,    0,   61,   57,    0,
-        0,    0,    0,   60,    0,    0,   58,   62,   62,   62,
-       62,   62,   63,   63,   63,   63,   63,    0,    0,    0,
-
-        0,   61,    0,    0,    0,   63,   60,    0,   62,   64,
-       64,   64,   64,   64,   65,   65,   65,   65,   65,   66,
-       66,   66,   66,   66,   75,   75,   75,   75,   75,   63,
-        0,   62,    0,    0,   65,    0,   64,    0,    0,    0,
-       65,    0,   66,   67,   67,   67,   67,   67,   68,   68,
-       68,   68,   68,    0,    0,    0,    0,   65,    0,   64,
-       67,    0,    0,   65,    0,   66,    0,   67,    0,    0,
-        0,   68,   69,   69,   69,   69,   69,   70,   70,   70,
-       70,   70,    0,    0,   67,   71,   71,   71,   71,   71,
-       67,    0,    0,    0,   68,    0,    0,   69,    0,    0,
-
-       70,   72,   72,   72,   72,   72,    0,    0,   71,   74,
-       74,   74,   74,   74,    0,   85,    0,    0,   74,    0,
-       69,   72,    0,   70,   85,   85,   85,   85,   85,    0,
-        0,   71,   76,   76,   76,   76,   76,   84,   84,   84,
-       84,   84,   74,    0,   72,   73,   73,   73,   73,   73,
-       84,    0,   76,    0,    0,    0,    0,   73,    0,   73,
-       77,   77,   77,   77,   77,   78,   78,   78,   78,   78,
-        0,   73,   73,    0,   84,   76,    0,    0,    0,    0,
-       77,   73,    0,   73,    0,    0,    0,   77,   78,   79,
-       79,   79,   79,   79,   73,   73,   80,   80,   80,   80,
-
-       80,    0,    0,   77,   81,   81,   81,   81,   81,    0,
-       77,   78,   79,    0,   81,    0,    0,    0,   80,   82,
-       82,   82,   82,   82,   83,   83,   83,   83,   83,    0,
-        0,   82,    0,    0,    0,   79,    0,    0,   81,    0,
-        0,   80,    0,    0,   83,   86,   86,   86,   86,   86,
-       87,   87,   87,   87,   87,   82,   88,   88,   88,   88,
-       88,   89,   89,   89,   89,   89,    0,   83,    0,    0,
-        0,    0,   89,   88,   90,   90,   90,   90,   90,   91,
-       91,   91,   91,   91,   92,   92,   92,   92,   92,    0,
-        0,    0,    0,   92,    0,    0,   89,   88,    0,   90,
-
-       91,   93,   93,   93,   93,   93,    0,    0,    0,  185,
-       93,    0,    0,    0,   93,  185,    0,   92,  185,  185,
-      185,    0,   90,   91,   94,   94,   94,   94,   94,   95,
-       95,   95,   95,   95,   93,    0,    0,   94,   93,    0,
-       95,   96,   96,   96,   96,   96,   97,   97,   97,   97,
-       97,   98,   98,   98,   98,   98,  100,  100,  100,  100,
-      100,   94,    0,    0,   95,   96,   99,   99,   99,   99,
-       99,   98,    0,   97,    0,   99,    0,  100,    0,    0,
-      101,  101,  101,  101,  101,    0,    0,    0,   96,  102,
-      102,  102,  102,  102,   98,    0,   97,    0,    0,   99,
-
-      100,  101,  103,  103,  103,  103,  103,  104,  104,  104,
-      104,  104,  105,  105,  105,  105,  105,  102,    0,    0,
-      104,    0,    0,    0,  101,    0,  103,    0,    0,  105,
-      106,  106,  106,  106,  106,  107,  107,  107,  107,  107,
-      102,    0,    0,  106,  104,    0,    0,    0,    0,  103,
-        0,    0,    0,  105,    0,    0,    0,    0,  107,  108,
-      108,  108,  108,  108,    0,    0,    0,  106,    0,    0,
-        0,  108,  109,  109,  109,  109,  109,    0,    0,    0,
-        0,  107,    0,  110,  110,  110,  110,  110,    0,    0,
-        0,    0,  109,    0,    0,  108,  110,  111,  111,  111,
-
-      111,  111,  112,  112,  112,  112,  112,    0,  113,  113,
-      113,  113,  113,    0,    0,  109,    0,    0,    0,    0,
-      110,    0,    0,  114,  114,  114,  114,  114,    0,    0,
-        0,    0,  112,  113,  114,    0,    0,  115,  115,  115,
-      115,  115,  116,  116,  116,  116,  116,    0,    0,    0,
-        0,  116,    0,    0,    0,  112,  113,  115,  114,  117,
-      117,  117,  117,  117,  118,  118,  118,  118,  118,    0,
-        0,    0,  119,    0,    0,  116,    0,    0,    0,    0,
-      115,  119,  119,  119,  119,  119,    0,  117,    0,  118,
-        0,  120,  120,  120,  120,  120,  121,  121,  121,  121,
-
-      121,  122,  122,  122,  122,  122,    0,    0,    0,    0,
-      117,    0,  118,  120,  123,  123,  123,  123,  123,  124,
-      124,  124,  124,  124,  125,  125,  125,  125,  125,    0,
-        0,  123,    0,    0,    0,    0,  120,  126,  126,  126,
-      126,  126,    0,    0,    0,    0,  124,  127,  127,  127,
-      127,  127,    0,    0,    0,  123,  128,  128,  128,  128,
-      128,  129,  129,  129,  129,  129,    0,    0,    0,  124,
-        0,    0,    0,    0,  127,  130,  130,  130,  130,  130,
+        1,   11,   17,   17,   17,   17,   17,   22,   22,  182,
+       11,   11,   11,   11,   11,   20,  225,   20,   20,   20,
+       20,   20,   25,   25,   25,   25,   25,   26,   26,   26,
+
+       26,   26,   28,  182,  159,  169,   28,  207,  198,   28,
+       26,  169,  205,  207,   25,  224,   28,  218,   28,  209,
+       49,   25,  205,  205,  205,  205,   28,  159,   47,   26,
+       28,  198,   24,   28,   26,   10,    9,   25,    5,   28,
+        0,   28,    0,  209,   25,    0,   29,   29,   29,   29,
+       29,  217,   26,   27,   27,   27,   27,   27,    0,    0,
+      217,  217,   27,   31,   31,   31,   31,   31,    0,   27,
+        0,    0,    0,   30,    0,    0,   27,   29,   27,    0,
+       30,    0,    0,    0,   30,  206,   27,   30,   31,   30,
+        0,  206,    0,   27,  206,  206,  206,   30,    0,   27,
+
+       29,   27,    0,    0,   30,    0,    0,   30,    0,    0,
+       30,   31,   30,   32,   32,   32,   32,   32,   33,   33,
+       33,   33,   33,    0,    0,    0,   32,   34,   34,   34,
+       34,   34,   35,   35,   35,   35,   35,    0,    0,    0,
+       33,    0,   36,   36,   36,   36,   36,    0,    0,   35,
+       32,   36,    0,    0,    0,   35,    0,    0,    0,   36,
+        0,    0,    0,   33,   37,   37,   37,   37,   37,  215,
+        0,    0,    0,   35,    0,   36,    0,    0,   35,  215,
+      215,  215,  215,   36,    0,    0,    0,   37,    0,   38,
+       38,   38,   38,   38,   39,   39,   39,   39,   39,   41,
+
+       41,   41,   41,   41,    0,    0,    0,    0,   41,    0,
+       37,   38,   42,   42,   42,   42,   42,   39,   43,   43,
+       43,   43,   43,    0,    0,    0,    0,   43,    0,    0,
+        0,    0,   41,    0,   38,    0,   42,    0,    0,    0,
+       39,   40,   40,   40,   40,   40,   44,   44,   44,   44,
+       44,   43,    0,    0,   40,    0,    0,   40,    0,   42,
+        0,   52,   44,   52,   52,   52,   52,   52,   40,   40,
+        0,    0,    0,   40,    0,    0,    0,    0,   40,    0,
+        0,   40,    0,    0,    0,    0,   44,    0,   51,    0,
+        0,   40,   40,    0,    0,    0,   40,   51,   51,   51,
+
+       51,   51,   53,   53,   53,   53,   53,   58,   58,   58,
+       58,   58,   59,   59,   59,   59,   59,   60,   60,   60,
+       60,   60,    0,    0,   59,   61,   61,   61,   61,   61,
+        0,    0,   60,   62,   62,   62,   62,   62,    0,    0,
+       61,   63,   63,   63,   63,   63,    0,    0,   59,   64,
+       64,   64,   64,   64,    0,    0,   60,    0,   64,    0,
+        0,   63,    0,    0,   61,   65,   65,   65,   65,   65,
+       66,   66,   66,   66,   66,   67,   67,   67,   67,   67,
+        0,    0,   64,   66,   63,    0,   65,    0,   68,   68,
+       68,   68,   68,   65,   69,   69,   69,   69,   69,    0,
+
+        0,    0,   67,    0,    0,    0,    0,   66,   68,   65,
+        0,    0,    0,    0,   68,    0,   65,   69,   70,   70,
+       70,   70,   70,    0,    0,   67,   71,   71,   71,   71,
+       71,   68,    0,    0,    0,   70,    0,   68,    0,    0,
+       69,    0,   70,   72,   72,   72,   72,   72,    0,   71,
+       73,   73,   73,   73,   73,    0,    0,    0,    0,   70,
+       74,   74,   74,   74,   74,   70,    0,    0,   72,    0,
+        0,    0,   71,   73,   75,   75,   75,   75,   75,    0,
+        0,    0,    0,   74,   77,   77,   77,   77,   77,    0,
+        0,   72,    0,    0,   75,    0,   73,    0,   78,   78,
+
+       78,   78,   78,   77,    0,    0,   74,   78,   79,   79,
+       79,   79,   79,    0,    0,    0,    0,   75,   76,   76,
+       76,   76,   76,    0,    0,    0,   77,    0,    0,    0,
+       76,   78,   76,   80,   80,   80,   80,   80,    0,   79,
+        0,    0,    0,    0,   76,   76,   81,   81,   81,   81,
+       81,    0,    0,    0,   76,   80,   76,   82,   82,   82,
+       82,   82,   79,    0,    0,    0,    0,   76,   76,    0,
+        0,    0,    0,   81,    0,    0,    0,    0,   80,   83,
+       83,   83,   83,   83,   84,   84,   84,   84,   84,   85,
+       85,   85,   85,   85,    0,    0,   81,    0,    0,   83,
+
+        0,    0,    0,    0,   84,   86,   86,   86,   86,   86,
+        0,   84,   85,    0,    0,   87,   87,   87,   87,   87,
+        0,    0,   83,    0,    0,    0,    0,   84,   86,   91,
+       91,   91,   91,   91,   84,   85,   87,    0,   88,   88,
+       88,   88,   88,   89,   89,   89,   89,   89,    0,   91,
+        0,   86,    0,   89,   90,   90,   90,   90,   90,   87,
+       88,   92,   92,   92,   92,   92,   90,    0,    0,   93,
+        0,    0,   91,    0,   92,    0,    0,   89,   93,   93,
+       93,   93,   93,   88,   94,   94,   94,   94,   94,    0,
+       90,   95,   95,   95,   95,   95,    0,    0,   92,   96,
+
+       96,   96,   96,   96,   97,   97,   97,   97,   97,   98,
+       98,   98,   98,   98,   99,   99,   99,   99,   99,    0,
+       98,   97,  100,  100,  100,  100,  100,  101,  101,  101,
+      101,  101,  102,  102,  102,  102,  102,    0,    0,   99,
+        0,  102,    0,  100,   98,   97,    0,    0,    0,  101,
+      103,  103,  103,  103,  103,    0,    0,    0,    0,  103,
+        0,    0,   99,  103,    0,  102,  100,  104,  104,  104,
+      104,  104,  101,  105,  105,  105,  105,  105,    0,    0,
+      104,    0,    0,  103,  105,    0,    0,  103,  106,  106,
+      106,  106,  106,  107,  107,  107,  107,  107,  108,  108,
+
+      108,  108,  108,    0,  104,    0,    0,    0,  105,    0,
+        0,    0,  106,  109,  109,  109,  109,  109,  108,    0,
+      107,    0,  109,  110,  110,  110,  110,  110,  111,  111,
+      111,  111,  111,    0,    0,  106,  112,  112,  112,  112,
+      112,  108,    0,  107,  110,    0,  109,    0,    0,  111,
+      113,  113,  113,  113,  113,  114,  114,  114,  114,  114,
+        0,    0,    0,    0,  112,    0,    0,  110,  114,    0,
+        0,    0,  111,    0,  113,    0,  115,  115,  115,  115,
+      115,  116,  116,  116,  116,  116,    0,  112,    0,    0,
+        0,    0,  114,  115,  116,    0,    0,  113,  117,  117,
+
+      117,  117,  117,  118,  118,  118,  118,  118,    0,    0,
+      119,  119,  119,  119,  119,    0,  118,  115,  116,    0,
+        0,  117,  119,  120,  120,  120,  120,  120,  121,  121,
+      121,  121,  121,    0,    0,  122,    0,    0,    0,    0,
+      118,    0,    0,    0,  117,    0,  119,  122,  122,  122,
+      122,  122,  123,  123,  123,  123,  123,  124,  124,  124,
+      124,  124,  125,  125,  125,  125,  125,    0,    0,    0,
+      124,    0,  123,  126,  126,  126,  126,  126,    0,  127,
+      127,  127,  127,  127,  128,  128,  128,  128,  128,  129,
+      129,  129,  129,  129,  124,  123,    0,    0,    0,    0,
+
+      129,    0,    0,  126,  127,  130,  130,  130,  130,  130,
       131,  131,  131,  131,  131,    0,    0,    0,    0,  131,
-      132,  132,  132,  132,  132,    0,    0,  127,  133,  133,
-
-      133,  133,  133,    0,    0,    0,    0,  133,  134,  134,
-      134,  134,  134,  131,    0,    0,    0,  132,  135,  135,
-      135,  135,  135,  136,  136,  136,  136,  136,    0,    0,
-        0,  133,  137,  137,  137,  137,  137,    0,    0,    0,
-      132,    0,  135,    0,  138,  138,  138,  138,  138,  139,
-      139,  139,  139,  139,  140,  140,  140,  140,  140,    0,
-        0,    0,    0,  137,  138,  135,  141,  141,  141,  141,
-      141,    0,    0,    0,  139,  142,  142,  142,  142,  142,
-      143,  143,  143,  143,  143,  142,  137,  138,    0,    0,
-        0,  143,  144,  144,  144,  144,  144,  139,  145,  145,
-
-      145,  145,  145,    0,    0,    0,    0,  145,    0,  142,
-      146,  146,  146,  146,  146,  143,  147,  147,  147,  147,
-      147,  148,  148,  148,  148,  148,    0,    0,    0,  147,
-        0,  145,  149,  149,  149,  149,  149,  150,  150,  150,
-      150,  150,    0,    0,    0,  149,    0,    0,  148,    0,
-      150,    0,    0,  147,  152,  152,  152,  152,  152,  153,
-      153,  153,  153,  153,  154,  154,  154,  154,  154,  149,
-        0,  148,    0,    0,  150,    0,    0,  154,  155,  155,
-      155,  155,  155,    0,    0,    0,  153,    0,    0,    0,
-        0,  155,    0,  156,  156,  156,  156,  156,    0,    0,
-
-        0,  154,  157,  157,  157,  157,  157,    0,    0,  153,
-      156,    0,    0,    0,    0,  155,  158,  158,  158,  158,
-      158,  159,  159,  159,  159,  159,  160,  160,  160,  160,
-      160,    0,    0,    0,  156,  161,  161,  161,  161,  161,
-        0,    0,    0,  158,    0,    0,    0,    0,  161,  162,
-      162,  162,  162,  162,  163,  163,  163,  163,  163,    0,
-        0,    0,    0,  163,    0,    0,  158,  164,  164,  164,
-      164,  164,  161,    0,    0,    0,  162,  165,  165,  165,
-      165,  165,  166,  166,  166,  166,  166,  163,    0,    0,
-        0,    0,  165,    0,  164,    0,    0,    0,    0,  162,
-
-      167,  167,  167,  167,  167,    0,    0,    0,  166,    0,
-        0,    0,    0,  167,    0,    0,  165,  164,  168,  168,
-      168,  168,  168,  169,  169,  169,  169,  169,    0,  170,
-        0,  166,  171,  171,  171,  171,  171,  167,  170,  170,
-      170,  170,  170,    0,  168,  172,  172,  172,  172,  172,
-      173,  173,  173,  173,  173,  174,  174,  174,  174,  174,
-      175,  175,  175,  175,  175,    0,    0,  168,  176,  176,
-      176,  176,  176,    0,    0,    0,    0,  174,  177,  177,
-      177,  177,  177,  178,  178,  178,  178,  178,  179,  179,
-      179,  179,  179,    0,  178,  180,  180,  180,  180,  180,
-
-      174,  181,  181,  181,  181,  181,    0,    0,  180,  182,
-      182,  182,  182,  182,    0,    0,    0,    0,  178,  183,
-      183,  183,  183,  183,  187,  187,  187,  187,  187,    0,
-        0,    0,  180,  188,  188,  188,  188,  188,  189,  189,
-      189,  189,  189,    0,  190,  191,  191,  191,  191,  191,
-      193,    0,  188,  190,  190,  190,  190,  190,    0,  193,
-      193,  193,  193,  193,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,  188,  198,  198,  199,  199,
-      200,  200,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
-      197,  197,  197
+        0,    0,    0,    0,  129,  130,  126,  127,  132,  132,
+      132,  132,  132,  133,  133,  133,  133,  133,    0,    0,
+      134,    0,    0,  131,    0,    0,    0,    0,  130,  134,
+      134,  134,  134,  134,    0,    0,  132,    0,  133,    0,
+      135,  135,  135,  135,  135,  136,  136,  136,  136,  136,
+      137,  137,  137,  137,  137,    0,    0,    0,    0,  132,
+        0,  133,  135,  138,  138,  138,  138,  138,  139,  139,
+      139,  139,  139,  140,  140,  140,  140,  140,    0,    0,
+
+      138,    0,    0,    0,    0,  135,  141,  141,  141,  141,
+      141,    0,    0,    0,    0,  139,    0,    0,    0,    0,
+      140,    0,    0,    0,  138,  142,  142,  142,  142,  142,
+      143,  143,  143,  143,  143,    0,    0,    0,  139,    0,
+        0,    0,    0,  140,  144,  144,  144,  144,  144,  145,
+      145,  145,  145,  145,    0,    0,    0,  143,  146,  146,
+      146,  146,  146,  147,  147,  147,  147,  147,    0,    0,
+        0,    0,  147,  148,  148,  148,  148,  148,    0,    0,
+      143,  149,  149,  149,  149,  149,    0,    0,    0,    0,
+      149,  150,  150,  150,  150,  150,  147,    0,    0,    0,
+
+      148,  151,  151,  151,  151,  151,  152,  152,  152,  152,
+      152,    0,    0,    0,  149,  153,  153,  153,  153,  153,
+        0,    0,    0,  148,    0,  151,    0,  154,  154,  154,
+      154,  154,  155,  155,  155,  155,  155,  156,  156,  156,
+      156,  156,    0,    0,    0,    0,  153,  154,  151,  157,
+      157,  157,  157,  157,    0,    0,    0,  155,  158,  158,
+      158,  158,  158,  160,  160,  160,  160,  160,    0,  153,
+      154,    0,    0,  160,  161,  161,  161,  161,  161,    0,
+      155,    0,    0,    0,    0,  161,  162,  162,  162,  162,
+      162,  163,  163,  163,  163,  163,    0,  160,    0,    0,
+
+      163,  164,  164,  164,  164,  164,    0,    0,    0,  161,
+      165,  165,  165,  165,  165,  166,  166,  166,  166,  166,
+        0,    0,    0,  165,  163,  167,  167,  167,  167,  167,
+      168,  168,  168,  168,  168,    0,    0,    0,  167,    0,
+        0,    0,  166,  168,    0,    0,    0,  165,  170,  170,
+      170,  170,  170,  171,  171,  171,  171,  171,    0,    0,
+        0,    0,  167,    0,    0,  166,    0,  168,  172,  172,
+      172,  172,  172,  173,  173,  173,  173,  173,    0,    0,
+      171,  174,  174,  174,  174,  174,  173,  175,  175,  175,
+      175,  175,    0,    0,  174,  176,  176,  176,  176,  176,
+
+        0,    0,    0,  171,  175,  177,  177,  177,  177,  177,
+      173,  178,  178,  178,  178,  178,    0,    0,  174,  179,
+      179,  179,  179,  179,    0,    0,    0,    0,  175,    0,
+        0,    0,  177,  180,  180,  180,  180,  180,  181,  181,
+      181,  181,  181,    0,    0,    0,  180,  183,  183,  183,
+      183,  183,    0,    0,    0,  177,  183,  184,  184,  184,
+      184,  184,    0,    0,    0,  181,    0,    0,    0,    0,
+      180,  185,  185,  185,  185,  185,    0,    0,    0,    0,
+      183,    0,    0,    0,  184,    0,  185,    0,  181,  186,
+      186,  186,  186,  186,    0,  187,  187,  187,  187,  187,
+
+      188,  188,  188,  188,  188,    0,    0,  184,  187,    0,
+      185,    0,  190,    0,    0,  186,  189,  189,  189,  189,
+      189,  190,  190,  190,  190,  190,  188,  191,  191,  191,
+      191,  191,  187,  192,  192,  192,  192,  192,  186,  193,
+      193,  193,  193,  193,  194,  194,  194,  194,  194,  188,
+      195,  195,  195,  195,  195,  196,  196,  196,  196,  196,
+      197,  197,  197,  197,  197,    0,  194,  199,  199,  199,
+      199,  199,  200,  200,  200,  200,  200,    0,  199,  201,
+      201,  201,  201,  201,  202,  202,  202,  202,  202,  194,
+        0,    0,  201,  203,  203,  203,  203,  203,    0,    0,
+
+        0,    0,  199,  204,  204,  204,  204,  204,  208,  208,
+      208,  208,  208,    0,    0,    0,  201,  210,  210,  210,
+      210,  210,  211,  211,  211,  211,  211,    0,  212,  214,
+      214,  214,  214,  214,  216,    0,  210,  212,  212,  212,
+      212,  212,    0,  216,  216,  216,  216,  216,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,  210,
+      221,  221,  222,  222,  223,  223,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
+      220,  220,  220,  220,  220,  220,  220,  220
     } ;
 
 /* The intent behind this definition is that it'll catch
@@ -922,7 +969,7 @@ extern int atoi();
 extern double atof();
 
 #define RETURN_TOKEN(token) LOG_DEBUG("%s", #token);return token
-#line 925 "lex_sql.cpp"
+#line 972 "lex_sql.cpp"
 /* Prevent the need for linking with -lfl */
 #define YY_NO_INPUT 1
 /* 不区分大小写 */
@@ -931,7 +978,7 @@ extern double atof();
 /* 1. 匹配的规则长的优先 */
 /* 2. 写在最前面的优先 */
 /* yylval 就可以认为是 yacc 中 %union 定义的结构体(union 结构) */
-#line 934 "lex_sql.cpp"
+#line 981 "lex_sql.cpp"
 
 #define INITIAL 0
 #define STR 1
@@ -1217,7 +1264,7 @@ YY_DECL
 #line 75 "lex_sql.l"
 
 
-#line 1220 "lex_sql.cpp"
+#line 1267 "lex_sql.cpp"
 
 	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
 		{
@@ -1244,13 +1291,13 @@ yy_match:
 			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 				{
 				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 198 )
+				if ( yy_current_state >= 221 )
 					yy_c = yy_meta[yy_c];
 				}
 			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
 			++yy_cp;
 			}
-		while ( yy_base[yy_current_state] != 1583 );
+		while ( yy_base[yy_current_state] != 1767 );
 
 yy_find_action:
 		yy_act = yy_accept[yy_current_state];
@@ -1313,277 +1360,312 @@ RETURN_TOKEN(DOT);
 case 8:
 YY_RULE_SETUP
 #line 87 "lex_sql.l"
-RETURN_TOKEN(EXIT);
+RETURN_TOKEN(SUM_STR);
 	YY_BREAK
 case 9:
 YY_RULE_SETUP
 #line 88 "lex_sql.l"
-RETURN_TOKEN(HELP);
+RETURN_TOKEN(MIN_STR);
 	YY_BREAK
 case 10:
 YY_RULE_SETUP
 #line 89 "lex_sql.l"
-RETURN_TOKEN(DESC);
+RETURN_TOKEN(MAX_STR);
 	YY_BREAK
 case 11:
 YY_RULE_SETUP
 #line 90 "lex_sql.l"
-RETURN_TOKEN(CREATE);
+RETURN_TOKEN(AVG_STR);
 	YY_BREAK
 case 12:
 YY_RULE_SETUP
 #line 91 "lex_sql.l"
-RETURN_TOKEN(DROP);
+RETURN_TOKEN(COUNT_STR);
 	YY_BREAK
 case 13:
 YY_RULE_SETUP
 #line 92 "lex_sql.l"
-RETURN_TOKEN(TABLE);
+RETURN_TOKEN(LIKE_STR);
 	YY_BREAK
 case 14:
 YY_RULE_SETUP
 #line 93 "lex_sql.l"
-RETURN_TOKEN(TABLES);
+RETURN_TOKEN(NOT_LIKE_STR);
 	YY_BREAK
 case 15:
 YY_RULE_SETUP
 #line 94 "lex_sql.l"
-RETURN_TOKEN(INDEX);
+RETURN_TOKEN(EXIT);
 	YY_BREAK
 case 16:
 YY_RULE_SETUP
 #line 95 "lex_sql.l"
-RETURN_TOKEN(ON);
+RETURN_TOKEN(HELP);
 	YY_BREAK
 case 17:
 YY_RULE_SETUP
 #line 96 "lex_sql.l"
-RETURN_TOKEN(SHOW);
+RETURN_TOKEN(DESC);
 	YY_BREAK
 case 18:
 YY_RULE_SETUP
 #line 97 "lex_sql.l"
-RETURN_TOKEN(SYNC);
+RETURN_TOKEN(CREATE);
 	YY_BREAK
 case 19:
 YY_RULE_SETUP
 #line 98 "lex_sql.l"
-RETURN_TOKEN(SELECT);
+RETURN_TOKEN(DROP);
 	YY_BREAK
 case 20:
 YY_RULE_SETUP
 #line 99 "lex_sql.l"
-RETURN_TOKEN(CALC);
+RETURN_TOKEN(TABLE);
 	YY_BREAK
 case 21:
 YY_RULE_SETUP
 #line 100 "lex_sql.l"
-RETURN_TOKEN(FROM);
+RETURN_TOKEN(TABLES);
 	YY_BREAK
 case 22:
 YY_RULE_SETUP
 #line 101 "lex_sql.l"
-RETURN_TOKEN(WHERE);
+RETURN_TOKEN(INDEX);
 	YY_BREAK
 case 23:
 YY_RULE_SETUP
 #line 102 "lex_sql.l"
-RETURN_TOKEN(AND);
+RETURN_TOKEN(ON);
 	YY_BREAK
 case 24:
 YY_RULE_SETUP
 #line 103 "lex_sql.l"
-RETURN_TOKEN(INSERT);
+RETURN_TOKEN(SHOW);
 	YY_BREAK
 case 25:
 YY_RULE_SETUP
 #line 104 "lex_sql.l"
-RETURN_TOKEN(INTO);
+RETURN_TOKEN(SYNC);
 	YY_BREAK
 case 26:
 YY_RULE_SETUP
 #line 105 "lex_sql.l"
-RETURN_TOKEN(VALUES);
+RETURN_TOKEN(SELECT);
 	YY_BREAK
 case 27:
 YY_RULE_SETUP
 #line 106 "lex_sql.l"
-RETURN_TOKEN(DELETE);
+RETURN_TOKEN(CALC);
 	YY_BREAK
 case 28:
 YY_RULE_SETUP
 #line 107 "lex_sql.l"
-RETURN_TOKEN(UPDATE);
+RETURN_TOKEN(FROM);
 	YY_BREAK
 case 29:
 YY_RULE_SETUP
 #line 108 "lex_sql.l"
-RETURN_TOKEN(SET);
+RETURN_TOKEN(WHERE);
 	YY_BREAK
 case 30:
 YY_RULE_SETUP
 #line 109 "lex_sql.l"
-RETURN_TOKEN(TRX_BEGIN);
+RETURN_TOKEN(AND);
 	YY_BREAK
 case 31:
 YY_RULE_SETUP
 #line 110 "lex_sql.l"
-RETURN_TOKEN(TRX_COMMIT);
+RETURN_TOKEN(INSERT);
 	YY_BREAK
 case 32:
 YY_RULE_SETUP
 #line 111 "lex_sql.l"
-RETURN_TOKEN(TRX_ROLLBACK);
+RETURN_TOKEN(INTO);
 	YY_BREAK
 case 33:
 YY_RULE_SETUP
 #line 112 "lex_sql.l"
-RETURN_TOKEN(INT_T);
+RETURN_TOKEN(VALUES);
 	YY_BREAK
 case 34:
 YY_RULE_SETUP
 #line 113 "lex_sql.l"
-RETURN_TOKEN(STRING_T);
+RETURN_TOKEN(DELETE);
 	YY_BREAK
 case 35:
 YY_RULE_SETUP
 #line 114 "lex_sql.l"
-RETURN_TOKEN(FLOAT_T);
+RETURN_TOKEN(UPDATE);
 	YY_BREAK
 case 36:
 YY_RULE_SETUP
 #line 115 "lex_sql.l"
-RETURN_TOKEN(DATE_T);
+RETURN_TOKEN(SET);
 	YY_BREAK
 case 37:
 YY_RULE_SETUP
 #line 116 "lex_sql.l"
-RETURN_TOKEN(LOAD);
+RETURN_TOKEN(TRX_BEGIN);
 	YY_BREAK
 case 38:
 YY_RULE_SETUP
 #line 117 "lex_sql.l"
-RETURN_TOKEN(DATA);
+RETURN_TOKEN(TRX_COMMIT);
 	YY_BREAK
 case 39:
 YY_RULE_SETUP
 #line 118 "lex_sql.l"
-RETURN_TOKEN(INFILE);
+RETURN_TOKEN(TRX_ROLLBACK);
 	YY_BREAK
 case 40:
 YY_RULE_SETUP
 #line 119 "lex_sql.l"
-RETURN_TOKEN(EXPLAIN);
+RETURN_TOKEN(INT_T);
 	YY_BREAK
 case 41:
 YY_RULE_SETUP
 #line 120 "lex_sql.l"
-RETURN_TOKEN(GROUP);
+RETURN_TOKEN(STRING_T);
 	YY_BREAK
 case 42:
 YY_RULE_SETUP
 #line 121 "lex_sql.l"
-RETURN_TOKEN(BY);
+RETURN_TOKEN(FLOAT_T);
 	YY_BREAK
 case 43:
 YY_RULE_SETUP
 #line 122 "lex_sql.l"
-RETURN_TOKEN(STORAGE);
+RETURN_TOKEN(DATE_T);
 	YY_BREAK
 case 44:
 YY_RULE_SETUP
 #line 123 "lex_sql.l"
-RETURN_TOKEN(FORMAT);
+RETURN_TOKEN(LOAD);
 	YY_BREAK
 case 45:
 YY_RULE_SETUP
 #line 124 "lex_sql.l"
-yylval->string=strdup(yytext); RETURN_TOKEN(ID);
+RETURN_TOKEN(DATA);
 	YY_BREAK
 case 46:
 YY_RULE_SETUP
 #line 125 "lex_sql.l"
-RETURN_TOKEN(LBRACE);
+RETURN_TOKEN(INFILE);
 	YY_BREAK
 case 47:
 YY_RULE_SETUP
 #line 126 "lex_sql.l"
-RETURN_TOKEN(RBRACE);
+RETURN_TOKEN(EXPLAIN);
 	YY_BREAK
 case 48:
 YY_RULE_SETUP
-#line 128 "lex_sql.l"
-RETURN_TOKEN(COMMA);
+#line 127 "lex_sql.l"
+RETURN_TOKEN(GROUP);
 	YY_BREAK
 case 49:
 YY_RULE_SETUP
-#line 129 "lex_sql.l"
-RETURN_TOKEN(EQ);
+#line 128 "lex_sql.l"
+RETURN_TOKEN(BY);
 	YY_BREAK
 case 50:
 YY_RULE_SETUP
-#line 130 "lex_sql.l"
-RETURN_TOKEN(LE);
+#line 129 "lex_sql.l"
+RETURN_TOKEN(STORAGE);
 	YY_BREAK
 case 51:
 YY_RULE_SETUP
-#line 131 "lex_sql.l"
-RETURN_TOKEN(NE);
+#line 130 "lex_sql.l"
+RETURN_TOKEN(FORMAT);
 	YY_BREAK
 case 52:
 YY_RULE_SETUP
-#line 132 "lex_sql.l"
-RETURN_TOKEN(NE);
+#line 131 "lex_sql.l"
+yylval->string=strdup(yytext); RETURN_TOKEN(ID);
 	YY_BREAK
 case 53:
 YY_RULE_SETUP
-#line 133 "lex_sql.l"
-RETURN_TOKEN(LT);
+#line 132 "lex_sql.l"
+RETURN_TOKEN(LBRACE);
 	YY_BREAK
 case 54:
 YY_RULE_SETUP
-#line 134 "lex_sql.l"
-RETURN_TOKEN(GE);
+#line 133 "lex_sql.l"
+RETURN_TOKEN(RBRACE);
 	YY_BREAK
 case 55:
 YY_RULE_SETUP
 #line 135 "lex_sql.l"
-RETURN_TOKEN(GT);
+RETURN_TOKEN(COMMA);
 	YY_BREAK
 case 56:
-#line 138 "lex_sql.l"
+YY_RULE_SETUP
+#line 136 "lex_sql.l"
+RETURN_TOKEN(EQ);
+	YY_BREAK
 case 57:
-#line 139 "lex_sql.l"
+YY_RULE_SETUP
+#line 137 "lex_sql.l"
+RETURN_TOKEN(LE);
+	YY_BREAK
 case 58:
-#line 140 "lex_sql.l"
+YY_RULE_SETUP
+#line 138 "lex_sql.l"
+RETURN_TOKEN(NE);
+	YY_BREAK
 case 59:
 YY_RULE_SETUP
-#line 140 "lex_sql.l"
-{ return yytext[0]; }
+#line 139 "lex_sql.l"
+RETURN_TOKEN(NE);
 	YY_BREAK
 case 60:
-/* rule 60 can match eol */
 YY_RULE_SETUP
-#line 141 "lex_sql.l"
-yylval->string = strdup(yytext); RETURN_TOKEN(SSS);
+#line 140 "lex_sql.l"
+RETURN_TOKEN(LT);
 	YY_BREAK
 case 61:
-/* rule 61 can match eol */
+YY_RULE_SETUP
+#line 141 "lex_sql.l"
+RETURN_TOKEN(GE);
+	YY_BREAK
+case 62:
 YY_RULE_SETUP
 #line 142 "lex_sql.l"
+RETURN_TOKEN(GT);
+	YY_BREAK
+case 63:
+#line 146 "lex_sql.l"
+case 64:
+#line 147 "lex_sql.l"
+case 65:
+#line 148 "lex_sql.l"
+case 66:
+YY_RULE_SETUP
+#line 148 "lex_sql.l"
+{ return yytext[0]; }
+	YY_BREAK
+case 67:
+/* rule 67 can match eol */
+YY_RULE_SETUP
+#line 149 "lex_sql.l"
 yylval->string = strdup(yytext); RETURN_TOKEN(SSS);
 	YY_BREAK
-case 62:
+case 68:
+/* rule 68 can match eol */
 YY_RULE_SETUP
-#line 144 "lex_sql.l"
+#line 150 "lex_sql.l"
+yylval->string = strdup(yytext); RETURN_TOKEN(SSS);
+	YY_BREAK
+case 69:
+YY_RULE_SETUP
+#line 152 "lex_sql.l"
 LOG_DEBUG("Unknown character [%c]",yytext[0]); return yytext[0];
 	YY_BREAK
-case 63:
+case 70:
 YY_RULE_SETUP
-#line 145 "lex_sql.l"
+#line 153 "lex_sql.l"
 ECHO;
 	YY_BREAK
-#line 1586 "lex_sql.cpp"
+#line 1668 "lex_sql.cpp"
 case YY_STATE_EOF(INITIAL):
 case YY_STATE_EOF(STR):
 	yyterminate();
@@ -1883,7 +1965,7 @@ static int yy_get_next_buffer (yyscan_t yyscanner)
 		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 			{
 			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 198 )
+			if ( yy_current_state >= 221 )
 				yy_c = yy_meta[yy_c];
 			}
 		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
@@ -1912,11 +1994,11 @@ static int yy_get_next_buffer (yyscan_t yyscanner)
 	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
 		{
 		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 198 )
+		if ( yy_current_state >= 221 )
 			yy_c = yy_meta[yy_c];
 		}
 	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
-	yy_is_jam = (yy_current_state == 197);
+	yy_is_jam = (yy_current_state == 220);
 
 	(void)yyg;
 	return yy_is_jam ? 0 : yy_current_state;
@@ -2739,7 +2821,7 @@ void yyfree (void * ptr , yyscan_t yyscanner)
 
 #define YYTABLES_NAME "yytables"
 
-#line 145 "lex_sql.l"
+#line 153 "lex_sql.l"
 
 
 void scan_string(const char *str, yyscan_t scanner) {
diff --git a/src/observer/sql/parser/lex_sql.h b/src/observer/sql/parser/lex_sql.h
index b4fd123..b535f07 100644
--- a/src/observer/sql/parser/lex_sql.h
+++ b/src/observer/sql/parser/lex_sql.h
@@ -542,7 +542,7 @@ extern int yylex \
 #undef yyTABLES_NAME
 #endif
 
-#line 145 "lex_sql.l"
+#line 153 "lex_sql.l"
 
 
 #line 548 "lex_sql.h"
diff --git a/src/observer/sql/parser/lex_sql.l b/src/observer/sql/parser/lex_sql.l
index 0c51e3a..61f8689 100644
--- a/src/observer/sql/parser/lex_sql.l
+++ b/src/observer/sql/parser/lex_sql.l
@@ -84,6 +84,13 @@ QUOTE            [\'\"]
 
 ";"                                     RETURN_TOKEN(SEMICOLON);
 {DOT}                                   RETURN_TOKEN(DOT);
+SUM                                   RETURN_TOKEN(SUM_STR);
+MIN                                   RETURN_TOKEN(MIN_STR);
+MAX                                   RETURN_TOKEN(MAX_STR);
+AVG                                   RETURN_TOKEN(AVG_STR);
+COUNT                                 RETURN_TOKEN(COUNT_STR);
+LIKE                                    RETURN_TOKEN(LIKE_STR);
+"NOT LIKE"                              RETURN_TOKEN(NOT_LIKE_STR);
 EXIT                                    RETURN_TOKEN(EXIT);
 HELP                                    RETURN_TOKEN(HELP);
 DESC                                    RETURN_TOKEN(DESC);
@@ -134,6 +141,7 @@ FORMAT                                  RETURN_TOKEN(FORMAT);
 ">="                                    RETURN_TOKEN(GE);
 ">"                                     RETURN_TOKEN(GT);
 
+
 "+" |
 "-" |
 "*" |
diff --git a/src/observer/sql/parser/parse.cpp b/src/observer/sql/parser/parse.cpp
index 30b95e4..f3cc647 100644
--- a/src/observer/sql/parser/parse.cpp
+++ b/src/observer/sql/parser/parse.cpp
@@ -38,6 +38,7 @@ RC parse(const char *st, ParsedSqlResult *sql_result)
   parse_success_ = true;
   sql_parse(st, sql_result);
   if(!parse_success_) {
+    // std::cout << "syntax error" << std::endl;
     return RC::SQL_SYNTAX;
   }
   return RC::SUCCESS;
diff --git a/src/observer/sql/parser/parse_defs.h b/src/observer/sql/parser/parse_defs.h
index 4672bc1..41d596b 100644
--- a/src/observer/sql/parser/parse_defs.h
+++ b/src/observer/sql/parser/parse_defs.h
@@ -51,6 +51,8 @@ enum CompOp
   LESS_THAN,    ///< "<"
   GREAT_EQUAL,  ///< ">="
   GREAT_THAN,   ///< ">"
+  LIKE,         ///< LIKE
+  NOT_LIKE,     ///< NOT LIKE
   NO_OP
 };
 
diff --git a/src/observer/sql/parser/yacc_sql.cpp b/src/observer/sql/parser/yacc_sql.cpp
index 9a225f3..eb2272c 100644
--- a/src/observer/sql/parser/yacc_sql.cpp
+++ b/src/observer/sql/parser/yacc_sql.cpp
@@ -107,12 +107,10 @@ bool check_date(int y, int m, int d) {
 bool init_date_value(Value* value, const char* v) {
     int y, m, d;
     sscanf(v, "%d-%d-%d", &y, &m, &d);
-    // std::cout << "666 " << y << " " << m << " " << d << std::endl;
     bool b = check_date(y, m, d);
     if(!b) {
       return false;
     }
-    // std::cout << "888 " << y << " " << m << " " << d << std::endl;
     int tmp = y * 10000 + m * 100 + d;
     value->set_date(tmp);
     return true;
@@ -150,7 +148,7 @@ UnboundAggregateExpr *create_aggregate_expression(const char *aggregate_name,
 }
 
 
-#line 154 "yacc_sql.cpp"
+#line 152 "yacc_sql.cpp"
 
 # ifndef YY_CAST
 #  ifdef __cplusplus
@@ -209,77 +207,85 @@ enum yysymbol_kind_t
   YYSYMBOL_DATE_T = 28,                    /* DATE_T  */
   YYSYMBOL_HELP = 29,                      /* HELP  */
   YYSYMBOL_EXIT = 30,                      /* EXIT  */
-  YYSYMBOL_DOT = 31,                       /* DOT  */
-  YYSYMBOL_INTO = 32,                      /* INTO  */
-  YYSYMBOL_VALUES = 33,                    /* VALUES  */
-  YYSYMBOL_FROM = 34,                      /* FROM  */
-  YYSYMBOL_WHERE = 35,                     /* WHERE  */
-  YYSYMBOL_AND = 36,                       /* AND  */
-  YYSYMBOL_SET = 37,                       /* SET  */
-  YYSYMBOL_ON = 38,                        /* ON  */
-  YYSYMBOL_LOAD = 39,                      /* LOAD  */
-  YYSYMBOL_DATA = 40,                      /* DATA  */
-  YYSYMBOL_INFILE = 41,                    /* INFILE  */
-  YYSYMBOL_EXPLAIN = 42,                   /* EXPLAIN  */
-  YYSYMBOL_STORAGE = 43,                   /* STORAGE  */
-  YYSYMBOL_FORMAT = 44,                    /* FORMAT  */
-  YYSYMBOL_EQ = 45,                        /* EQ  */
-  YYSYMBOL_LT = 46,                        /* LT  */
-  YYSYMBOL_GT = 47,                        /* GT  */
-  YYSYMBOL_LE = 48,                        /* LE  */
-  YYSYMBOL_GE = 49,                        /* GE  */
-  YYSYMBOL_NE = 50,                        /* NE  */
-  YYSYMBOL_NUMBER = 51,                    /* NUMBER  */
-  YYSYMBOL_FLOAT = 52,                     /* FLOAT  */
-  YYSYMBOL_DATE_STR = 53,                  /* DATE_STR  */
-  YYSYMBOL_ID = 54,                        /* ID  */
-  YYSYMBOL_SSS = 55,                       /* SSS  */
-  YYSYMBOL_56_ = 56,                       /* '+'  */
-  YYSYMBOL_57_ = 57,                       /* '-'  */
-  YYSYMBOL_58_ = 58,                       /* '*'  */
-  YYSYMBOL_59_ = 59,                       /* '/'  */
-  YYSYMBOL_UMINUS = 60,                    /* UMINUS  */
-  YYSYMBOL_YYACCEPT = 61,                  /* $accept  */
-  YYSYMBOL_commands = 62,                  /* commands  */
-  YYSYMBOL_command_wrapper = 63,           /* command_wrapper  */
-  YYSYMBOL_exit_stmt = 64,                 /* exit_stmt  */
-  YYSYMBOL_help_stmt = 65,                 /* help_stmt  */
-  YYSYMBOL_sync_stmt = 66,                 /* sync_stmt  */
-  YYSYMBOL_begin_stmt = 67,                /* begin_stmt  */
-  YYSYMBOL_commit_stmt = 68,               /* commit_stmt  */
-  YYSYMBOL_rollback_stmt = 69,             /* rollback_stmt  */
-  YYSYMBOL_drop_table_stmt = 70,           /* drop_table_stmt  */
-  YYSYMBOL_show_tables_stmt = 71,          /* show_tables_stmt  */
-  YYSYMBOL_desc_table_stmt = 72,           /* desc_table_stmt  */
-  YYSYMBOL_create_index_stmt = 73,         /* create_index_stmt  */
-  YYSYMBOL_drop_index_stmt = 74,           /* drop_index_stmt  */
-  YYSYMBOL_create_table_stmt = 75,         /* create_table_stmt  */
-  YYSYMBOL_attr_def_list = 76,             /* attr_def_list  */
-  YYSYMBOL_attr_def = 77,                  /* attr_def  */
-  YYSYMBOL_number = 78,                    /* number  */
-  YYSYMBOL_type = 79,                      /* type  */
-  YYSYMBOL_insert_stmt = 80,               /* insert_stmt  */
-  YYSYMBOL_value_list = 81,                /* value_list  */
-  YYSYMBOL_value = 82,                     /* value  */
-  YYSYMBOL_storage_format = 83,            /* storage_format  */
-  YYSYMBOL_delete_stmt = 84,               /* delete_stmt  */
-  YYSYMBOL_update_stmt = 85,               /* update_stmt  */
-  YYSYMBOL_select_stmt = 86,               /* select_stmt  */
-  YYSYMBOL_calc_stmt = 87,                 /* calc_stmt  */
-  YYSYMBOL_expression_list = 88,           /* expression_list  */
-  YYSYMBOL_expression = 89,                /* expression  */
-  YYSYMBOL_rel_attr = 90,                  /* rel_attr  */
-  YYSYMBOL_relation = 91,                  /* relation  */
-  YYSYMBOL_rel_list = 92,                  /* rel_list  */
-  YYSYMBOL_where = 93,                     /* where  */
-  YYSYMBOL_condition_list = 94,            /* condition_list  */
-  YYSYMBOL_condition = 95,                 /* condition  */
-  YYSYMBOL_comp_op = 96,                   /* comp_op  */
-  YYSYMBOL_group_by = 97,                  /* group_by  */
-  YYSYMBOL_load_data_stmt = 98,            /* load_data_stmt  */
-  YYSYMBOL_explain_stmt = 99,              /* explain_stmt  */
-  YYSYMBOL_set_variable_stmt = 100,        /* set_variable_stmt  */
-  YYSYMBOL_opt_semicolon = 101             /* opt_semicolon  */
+  YYSYMBOL_SUM_STR = 31,                   /* SUM_STR  */
+  YYSYMBOL_MIN_STR = 32,                   /* MIN_STR  */
+  YYSYMBOL_MAX_STR = 33,                   /* MAX_STR  */
+  YYSYMBOL_AVG_STR = 34,                   /* AVG_STR  */
+  YYSYMBOL_COUNT_STR = 35,                 /* COUNT_STR  */
+  YYSYMBOL_LIKE_STR = 36,                  /* LIKE_STR  */
+  YYSYMBOL_NOT_LIKE_STR = 37,              /* NOT_LIKE_STR  */
+  YYSYMBOL_DOT = 38,                       /* DOT  */
+  YYSYMBOL_INTO = 39,                      /* INTO  */
+  YYSYMBOL_VALUES = 40,                    /* VALUES  */
+  YYSYMBOL_FROM = 41,                      /* FROM  */
+  YYSYMBOL_WHERE = 42,                     /* WHERE  */
+  YYSYMBOL_AND = 43,                       /* AND  */
+  YYSYMBOL_SET = 44,                       /* SET  */
+  YYSYMBOL_ON = 45,                        /* ON  */
+  YYSYMBOL_LOAD = 46,                      /* LOAD  */
+  YYSYMBOL_DATA = 47,                      /* DATA  */
+  YYSYMBOL_INFILE = 48,                    /* INFILE  */
+  YYSYMBOL_EXPLAIN = 49,                   /* EXPLAIN  */
+  YYSYMBOL_STORAGE = 50,                   /* STORAGE  */
+  YYSYMBOL_FORMAT = 51,                    /* FORMAT  */
+  YYSYMBOL_EQ = 52,                        /* EQ  */
+  YYSYMBOL_LT = 53,                        /* LT  */
+  YYSYMBOL_GT = 54,                        /* GT  */
+  YYSYMBOL_LE = 55,                        /* LE  */
+  YYSYMBOL_GE = 56,                        /* GE  */
+  YYSYMBOL_NE = 57,                        /* NE  */
+  YYSYMBOL_NUMBER = 58,                    /* NUMBER  */
+  YYSYMBOL_FLOAT = 59,                     /* FLOAT  */
+  YYSYMBOL_DATE_STR = 60,                  /* DATE_STR  */
+  YYSYMBOL_ID = 61,                        /* ID  */
+  YYSYMBOL_SSS = 62,                       /* SSS  */
+  YYSYMBOL_63_ = 63,                       /* '+'  */
+  YYSYMBOL_64_ = 64,                       /* '-'  */
+  YYSYMBOL_65_ = 65,                       /* '*'  */
+  YYSYMBOL_66_ = 66,                       /* '/'  */
+  YYSYMBOL_UMINUS = 67,                    /* UMINUS  */
+  YYSYMBOL_YYACCEPT = 68,                  /* $accept  */
+  YYSYMBOL_commands = 69,                  /* commands  */
+  YYSYMBOL_command_wrapper = 70,           /* command_wrapper  */
+  YYSYMBOL_exit_stmt = 71,                 /* exit_stmt  */
+  YYSYMBOL_help_stmt = 72,                 /* help_stmt  */
+  YYSYMBOL_sync_stmt = 73,                 /* sync_stmt  */
+  YYSYMBOL_begin_stmt = 74,                /* begin_stmt  */
+  YYSYMBOL_commit_stmt = 75,               /* commit_stmt  */
+  YYSYMBOL_rollback_stmt = 76,             /* rollback_stmt  */
+  YYSYMBOL_drop_table_stmt = 77,           /* drop_table_stmt  */
+  YYSYMBOL_show_tables_stmt = 78,          /* show_tables_stmt  */
+  YYSYMBOL_desc_table_stmt = 79,           /* desc_table_stmt  */
+  YYSYMBOL_create_index_stmt = 80,         /* create_index_stmt  */
+  YYSYMBOL_drop_index_stmt = 81,           /* drop_index_stmt  */
+  YYSYMBOL_create_table_stmt = 82,         /* create_table_stmt  */
+  YYSYMBOL_attr_def_list = 83,             /* attr_def_list  */
+  YYSYMBOL_attr_def = 84,                  /* attr_def  */
+  YYSYMBOL_number = 85,                    /* number  */
+  YYSYMBOL_type = 86,                      /* type  */
+  YYSYMBOL_insert_stmt = 87,               /* insert_stmt  */
+  YYSYMBOL_value_list = 88,                /* value_list  */
+  YYSYMBOL_value = 89,                     /* value  */
+  YYSYMBOL_storage_format = 90,            /* storage_format  */
+  YYSYMBOL_delete_stmt = 91,               /* delete_stmt  */
+  YYSYMBOL_update_stmt = 92,               /* update_stmt  */
+  YYSYMBOL_select_stmt = 93,               /* select_stmt  */
+  YYSYMBOL_calc_stmt = 94,                 /* calc_stmt  */
+  YYSYMBOL_expression_list = 95,           /* expression_list  */
+  YYSYMBOL_expression = 96,                /* expression  */
+  YYSYMBOL_agg_func = 97,                  /* agg_func  */
+  YYSYMBOL_rel_attr = 98,                  /* rel_attr  */
+  YYSYMBOL_relation = 99,                  /* relation  */
+  YYSYMBOL_rel_list = 100,                 /* rel_list  */
+  YYSYMBOL_where = 101,                    /* where  */
+  YYSYMBOL_condition_list = 102,           /* condition_list  */
+  YYSYMBOL_condition = 103,                /* condition  */
+  YYSYMBOL_comp_op = 104,                  /* comp_op  */
+  YYSYMBOL_group_by = 105,                 /* group_by  */
+  YYSYMBOL_load_data_stmt = 106,           /* load_data_stmt  */
+  YYSYMBOL_explain_stmt = 107,             /* explain_stmt  */
+  YYSYMBOL_set_variable_stmt = 108,        /* set_variable_stmt  */
+  YYSYMBOL_opt_semicolon = 109             /* opt_semicolon  */
 };
 typedef enum yysymbol_kind_t yysymbol_kind_t;
 
@@ -590,21 +596,21 @@ union yyalloc
 #endif /* !YYCOPY_NEEDED */
 
 /* YYFINAL -- State number of the termination state.  */
-#define YYFINAL  66
+#define YYFINAL  72
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   153
+#define YYLAST   177
 
 /* YYNTOKENS -- Number of terminals.  */
-#define YYNTOKENS  61
+#define YYNTOKENS  68
 /* YYNNTS -- Number of nonterminals.  */
-#define YYNNTS  41
+#define YYNNTS  42
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  95
+#define YYNRULES  104
 /* YYNSTATES -- Number of states.  */
-#define YYNSTATES  174
+#define YYNSTATES  185
 
 /* YYMAXUTOK -- Last valid token kind.  */
-#define YYMAXUTOK   311
+#define YYMAXUTOK   318
 
 
 /* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
@@ -622,7 +628,7 @@ static const yytype_int8 yytranslate[] =
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,    58,    56,     2,    57,     2,    59,     2,     2,
+       2,     2,    65,    63,     2,    64,     2,    66,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
@@ -649,23 +655,24 @@ static const yytype_int8 yytranslate[] =
       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
       35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
       45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
-      55,    60
+      55,    56,    57,    58,    59,    60,    61,    62,    67
 };
 
 #if YYDEBUG
   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_int16 yyrline[] =
 {
-       0,   219,   219,   227,   228,   229,   230,   231,   232,   233,
-     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
-     244,   245,   246,   250,   256,   261,   267,   273,   279,   285,
-     292,   298,   306,   320,   330,   354,   357,   370,   378,   389,
-     392,   393,   394,   395,   398,   415,   418,   429,   433,   437,
-     448,   457,   460,   467,   479,   494,   519,   528,   533,   545,
-     548,   551,   554,   557,   561,   564,   569,   575,   578,   585,
-     590,   600,   605,   610,   624,   627,   633,   636,   641,   648,
-     660,   672,   684,   699,   700,   701,   702,   703,   704,   710,
-     713,   719,   732,   740,   750,   751
+       0,   226,   226,   234,   235,   236,   237,   238,   239,   240,
+     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
+     251,   252,   253,   257,   263,   268,   274,   280,   286,   292,
+     299,   305,   313,   327,   337,   361,   364,   377,   385,   396,
+     399,   400,   401,   402,   405,   422,   425,   436,   440,   444,
+     454,   463,   466,   473,   485,   500,   525,   534,   539,   551,
+     554,   557,   560,   563,   567,   570,   575,   581,   584,   588,
+     592,   600,   604,   608,   612,   616,   623,   628,   638,   643,
+     648,   662,   665,   671,   674,   679,   686,   698,   710,   722,
+     737,   738,   739,   740,   741,   742,   743,   744,   750,   753,
+     759,   772,   780,   790,   791
 };
 #endif
 
@@ -685,19 +692,20 @@ static const char *const yytname[] =
   "CREATE", "DROP", "GROUP", "TABLE", "TABLES", "INDEX", "CALC", "SELECT",
   "DESC", "SHOW", "SYNC", "INSERT", "DELETE", "UPDATE", "LBRACE", "RBRACE",
   "COMMA", "TRX_BEGIN", "TRX_COMMIT", "TRX_ROLLBACK", "INT_T", "STRING_T",
-  "FLOAT_T", "DATE_T", "HELP", "EXIT", "DOT", "INTO", "VALUES", "FROM",
-  "WHERE", "AND", "SET", "ON", "LOAD", "DATA", "INFILE", "EXPLAIN",
-  "STORAGE", "FORMAT", "EQ", "LT", "GT", "LE", "GE", "NE", "NUMBER",
-  "FLOAT", "DATE_STR", "ID", "SSS", "'+'", "'-'", "'*'", "'/'", "UMINUS",
-  "$accept", "commands", "command_wrapper", "exit_stmt", "help_stmt",
-  "sync_stmt", "begin_stmt", "commit_stmt", "rollback_stmt",
+  "FLOAT_T", "DATE_T", "HELP", "EXIT", "SUM_STR", "MIN_STR", "MAX_STR",
+  "AVG_STR", "COUNT_STR", "LIKE_STR", "NOT_LIKE_STR", "DOT", "INTO",
+  "VALUES", "FROM", "WHERE", "AND", "SET", "ON", "LOAD", "DATA", "INFILE",
+  "EXPLAIN", "STORAGE", "FORMAT", "EQ", "LT", "GT", "LE", "GE", "NE",
+  "NUMBER", "FLOAT", "DATE_STR", "ID", "SSS", "'+'", "'-'", "'*'", "'/'",
+  "UMINUS", "$accept", "commands", "command_wrapper", "exit_stmt",
+  "help_stmt", "sync_stmt", "begin_stmt", "commit_stmt", "rollback_stmt",
   "drop_table_stmt", "show_tables_stmt", "desc_table_stmt",
   "create_index_stmt", "drop_index_stmt", "create_table_stmt",
   "attr_def_list", "attr_def", "number", "type", "insert_stmt",
   "value_list", "value", "storage_format", "delete_stmt", "update_stmt",
-  "select_stmt", "calc_stmt", "expression_list", "expression", "rel_attr",
-  "relation", "rel_list", "where", "condition_list", "condition",
-  "comp_op", "group_by", "load_data_stmt", "explain_stmt",
+  "select_stmt", "calc_stmt", "expression_list", "expression", "agg_func",
+  "rel_attr", "relation", "rel_list", "where", "condition_list",
+  "condition", "comp_op", "group_by", "load_data_stmt", "explain_stmt",
   "set_variable_stmt", "opt_semicolon", YY_NULLPTR
 };
 
@@ -718,8 +726,8 @@ static const yytype_int16 yytoknum[] =
      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
-     305,   306,   307,   308,   309,   310,    43,    45,    42,    47,
-     311
+     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
+     315,   316,   317,    43,    45,    42,    47,   318
 };
 #endif
 
@@ -737,24 +745,25 @@ static const yytype_int16 yytoknum[] =
      STATE-NUM.  */
 static const yytype_int16 yypact[] =
 {
-      73,     5,    30,    -5,    -5,   -37,    23,  -101,    -3,    10,
-       0,  -101,  -101,  -101,  -101,  -101,     1,    24,    73,    51,
-      60,  -101,  -101,  -101,  -101,  -101,  -101,  -101,  -101,  -101,
+      79,     3,    20,    -9,    -9,   -57,    22,  -101,   -27,     5,
+      -3,  -101,  -101,  -101,  -101,  -101,    -2,    10,    79,    67,
+      73,  -101,  -101,  -101,  -101,  -101,  -101,  -101,  -101,  -101,
     -101,  -101,  -101,  -101,  -101,  -101,  -101,  -101,  -101,  -101,
-    -101,    26,    27,    28,    29,    -5,  -101,  -101,  -101,   -15,
-    -101,    -5,  -101,  -101,  -101,    18,  -101,    38,  -101,  -101,
-      39,    50,    55,    61,    64,  -101,  -101,  -101,  -101,    88,
-      70,  -101,    71,     3,    -5,    57,  -101,    -5,    -5,    -5,
-      -5,    -5,    59,    81,    82,    62,   -18,    63,    65,    66,
-      67,  -101,    11,  -101,  -101,   -47,   -47,  -101,  -101,  -101,
-     101,    82,   104,   -27,  -101,    79,  -101,    93,    -6,   105,
-     108,  -101,  -101,    59,   121,   -18,    98,   -40,   -40,  -101,
-      94,   -18,   123,  -101,  -101,  -101,  -101,   113,    65,   114,
-      83,  -101,   129,  -101,   115,  -101,  -101,  -101,  -101,  -101,
-    -101,   -27,   -27,   -27,    82,    84,    89,   105,    92,   119,
-      -5,   -18,   122,  -101,  -101,  -101,  -101,  -101,  -101,  -101,
-    -101,   124,  -101,    97,  -101,  -101,  -101,   115,  -101,  -101,
-     100,  -101,    95,  -101
+    -101,    16,    18,    25,    26,    -9,  -101,  -101,  -101,  -101,
+    -101,  -101,  -101,  -101,    50,  -101,    -9,  -101,  -101,  -101,
+      17,    70,  -101,    57,  -101,  -101,    39,    43,    61,    55,
+      58,  -101,  -101,  -101,  -101,    92,    81,  -101,    82,     9,
+      51,  -101,    -9,    -9,    -9,    -9,    -9,   -17,    63,    75,
+      80,    74,   -53,    83,    85,    86,    87,  -101,  -101,  -101,
+     -26,   -26,  -101,  -101,  -101,     0,  -101,   115,    80,   123,
+      59,  -101,    91,  -101,   105,     8,   128,   131,  -101,  -101,
+      -9,    63,   144,   -53,    77,    77,  -101,   109,   -53,   145,
+    -101,  -101,  -101,  -101,   135,    85,   136,    94,   138,  -101,
+     155,  -101,   139,  -101,  -101,  -101,  -101,  -101,  -101,  -101,
+    -101,    59,    59,    59,    80,   100,   104,   128,   113,   146,
+    -101,    -9,   -53,   147,  -101,  -101,  -101,  -101,  -101,  -101,
+    -101,  -101,   148,  -101,   114,  -101,  -101,  -101,   139,  -101,
+    -101,   112,  -101,   108,  -101
 };
 
   /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
@@ -764,42 +773,43 @@ static const yytype_int8 yydefact[] =
 {
        0,     0,     0,     0,     0,     0,     0,    25,     0,     0,
        0,    26,    27,    28,    24,    23,     0,     0,     0,     0,
-      94,    22,    21,    14,    15,    16,    17,     9,    10,    11,
+     103,    22,    21,    14,    15,    16,    17,     9,    10,    11,
       12,    13,     8,     5,     7,     6,     4,     3,    18,    19,
-      20,     0,     0,     0,     0,     0,    47,    48,    49,    69,
-      50,     0,    67,    65,    56,    57,    66,     0,    31,    30,
-       0,     0,     0,     0,     0,    92,     1,    95,     2,     0,
-       0,    29,     0,     0,     0,     0,    64,     0,     0,     0,
-       0,     0,     0,     0,    74,     0,     0,     0,     0,     0,
-       0,    63,     0,    70,    58,    59,    60,    61,    62,    71,
-      72,    74,     0,    76,    53,     0,    93,     0,     0,    35,
-       0,    33,    68,     0,    89,     0,    69,     0,     0,    75,
-      77,     0,     0,    40,    41,    42,    43,    38,     0,     0,
-       0,    73,     0,    55,    45,    83,    84,    85,    86,    87,
-      88,     0,     0,    76,    74,     0,     0,    35,    51,     0,
-       0,     0,     0,    80,    82,    79,    81,    78,    54,    91,
-      39,     0,    36,     0,    34,    32,    90,    45,    44,    37,
-       0,    46,     0,    52
+      20,     0,     0,     0,     0,     0,    71,    72,    73,    74,
+      75,    47,    48,    49,    76,    50,     0,    67,    65,    56,
+      57,     0,    66,     0,    31,    30,     0,     0,     0,     0,
+       0,   101,     1,   104,     2,     0,     0,    29,     0,     0,
+       0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
+      81,     0,     0,     0,     0,     0,     0,    63,    77,    58,
+      59,    60,    61,    62,    69,     0,    78,    79,    81,     0,
+      83,    53,     0,   102,     0,     0,    35,     0,    33,    68,
+       0,     0,    98,     0,     0,     0,    82,    84,     0,     0,
+      40,    41,    42,    43,    38,     0,     0,     0,     0,    80,
+       0,    55,    45,    96,    97,    90,    91,    92,    93,    94,
+      95,     0,     0,    83,    81,     0,     0,    35,    51,     0,
+      70,     0,     0,     0,    87,    89,    86,    88,    85,    54,
+     100,    39,     0,    36,     0,    34,    32,    99,    45,    44,
+      37,     0,    46,     0,    52
 };
 
   /* YYPGOTO[NTERM-NUM].  */
-static const yytype_int8 yypgoto[] =
+static const yytype_int16 yypgoto[] =
 {
-    -101,  -101,   125,  -101,  -101,  -101,  -101,  -101,  -101,  -101,
-    -101,  -101,  -101,  -101,  -101,     4,    19,  -101,  -101,  -101,
-     -19,   -85,  -101,  -101,  -101,  -101,  -101,    -4,    20,  -100,
-    -101,    37,   -99,     9,  -101,    35,  -101,  -101,  -101,  -101,
-    -101
+    -101,  -101,   152,  -101,  -101,  -101,  -101,  -101,  -101,  -101,
+    -101,  -101,  -101,  -101,  -101,    14,    37,  -101,  -101,  -101,
+      -5,   -91,  -101,  -101,  -101,  -101,  -101,    -4,    54,  -101,
+     -83,  -101,    53,  -100,    23,  -101,    52,  -101,  -101,  -101,
+    -101,  -101
 };
 
   /* YYDEFGOTO[NTERM-NUM].  */
 static const yytype_int16 yydefgoto[] =
 {
       -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,   129,   109,   161,   127,    33,
-     152,    53,   164,    34,    35,    36,    37,    54,    55,    56,
-     100,   101,   104,   119,   120,   141,   133,    38,    39,    40,
-      68
+      28,    29,    30,    31,    32,   136,   116,   172,   134,    33,
+     163,    58,   175,    34,    35,    36,    37,    59,    60,    61,
+      62,   107,   108,   111,   126,   127,   151,   141,    38,    39,
+      40,    74
 };
 
   /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
@@ -807,42 +817,46 @@ static const yytype_int16 yydefgoto[] =
      number is the opposite.  If YYTABLE_NINF, syntax error.  */
 static const yytype_uint8 yytable[] =
 {
-      57,   106,   114,   118,    74,   135,   136,   137,   138,   139,
-     140,    80,    81,    41,    45,    42,    75,    58,   117,   123,
-     124,   125,   126,    91,    46,    47,    48,   116,    50,    60,
-     134,   112,    59,    46,    47,    48,   144,    50,    43,    77,
-      44,   154,   156,   118,    61,   158,    46,    47,    48,    49,
-      50,    66,    51,    52,    62,    63,   153,   155,   117,    78,
-      79,    80,    81,    67,    64,    73,   167,    78,    79,    80,
-      81,    76,    82,    94,    78,    79,    80,    81,     1,     2,
-      69,    70,    71,    72,     3,     4,     5,     6,     7,     8,
-       9,    10,    85,    83,    92,    11,    12,    13,    95,    96,
-      97,    98,    14,    15,    84,    87,    86,    88,    89,    90,
-      16,    93,    17,    99,   102,    18,   105,   103,   107,   108,
-     110,   111,   113,   115,   121,   122,   128,   130,   132,    75,
-     143,   145,   146,   150,   148,   163,   151,   149,   159,   165,
-     160,   170,   168,    65,   169,   172,   166,   147,   171,   173,
-     131,   162,   157,   142
+      63,   113,    45,   104,    64,    51,    52,    53,   122,    55,
+      45,    41,    66,    42,    46,    47,    48,    49,    50,   124,
+     119,   120,    46,    47,    48,    49,    50,   125,    43,    97,
+      44,    65,   142,   130,   131,   132,   133,   154,    82,    85,
+      86,    51,    52,    53,    54,    55,    67,    56,    57,    51,
+      52,    53,    54,    55,   169,    56,    57,    70,    68,    69,
+     164,   166,   124,    83,    84,    85,    86,    72,   165,   167,
+     125,   178,    83,    84,    85,    86,    73,    75,    99,    76,
+      83,    84,    85,    86,     1,     2,    77,    78,    80,    87,
+       3,     4,     5,     6,     7,     8,     9,    10,    88,    79,
+      89,    11,    12,    13,    90,    91,    93,    92,    14,    15,
+      81,    94,    98,   143,   144,   109,   138,    51,    52,    53,
+      54,    55,   110,    16,   106,    17,    95,    96,    18,   145,
+     146,   147,   148,   149,   150,   112,   121,   100,   101,   102,
+     103,   105,   123,   128,   129,   114,   115,   117,   118,   135,
+     137,   140,   153,   155,   156,   159,   158,   177,   160,   161,
+     162,   170,   171,   174,   183,   181,   176,   179,   180,   184,
+      71,   173,   157,   182,   139,     0,   168,   152
 };
 
-static const yytype_uint8 yycheck[] =
+static const yytype_int16 yycheck[] =
 {
-       4,    86,   101,   103,    19,    45,    46,    47,    48,    49,
-      50,    58,    59,     8,    19,    10,    31,    54,   103,    25,
-      26,    27,    28,    20,    51,    52,    53,    54,    55,    32,
-     115,    20,     9,    51,    52,    53,   121,    55,     8,    21,
-      10,   141,   142,   143,    34,   144,    51,    52,    53,    54,
-      55,     0,    57,    58,    54,    54,   141,   142,   143,    56,
-      57,    58,    59,     3,    40,    45,   151,    56,    57,    58,
-      59,    51,    34,    77,    56,    57,    58,    59,     5,     6,
-      54,    54,    54,    54,    11,    12,    13,    14,    15,    16,
-      17,    18,    37,    54,    74,    22,    23,    24,    78,    79,
-      80,    81,    29,    30,    54,    41,    45,    19,    38,    38,
-      37,    54,    39,    54,    33,    42,    54,    35,    55,    54,
-      54,    54,    21,    19,    45,    32,    21,    19,     7,    31,
-      36,     8,    19,     4,    20,    43,    21,    54,    54,    20,
-      51,    44,    20,    18,    20,    45,   150,   128,   167,    54,
-     113,   147,   143,   118
+       4,    92,    19,    20,    61,    58,    59,    60,   108,    62,
+      19,     8,    39,    10,    31,    32,    33,    34,    35,   110,
+      20,    21,    31,    32,    33,    34,    35,   110,     8,    20,
+      10,     9,   123,    25,    26,    27,    28,   128,    21,    65,
+      66,    58,    59,    60,    61,    62,    41,    64,    65,    58,
+      59,    60,    61,    62,   154,    64,    65,    47,    61,    61,
+     151,   152,   153,    63,    64,    65,    66,     0,   151,   152,
+     153,   162,    63,    64,    65,    66,     3,    61,    82,    61,
+      63,    64,    65,    66,     5,     6,    61,    61,    38,    19,
+      11,    12,    13,    14,    15,    16,    17,    18,    41,    45,
+      61,    22,    23,    24,    61,    44,    48,    52,    29,    30,
+      56,    19,    61,    36,    37,    40,   120,    58,    59,    60,
+      61,    62,    42,    44,    61,    46,    45,    45,    49,    52,
+      53,    54,    55,    56,    57,    61,    21,    83,    84,    85,
+      86,    87,    19,    52,    39,    62,    61,    61,    61,    21,
+      19,     7,    43,     8,    19,    61,    20,   161,    20,     4,
+      21,    61,    58,    50,    52,    51,    20,    20,    20,    61,
+      18,   157,   135,   178,   121,    -1,   153,   125
 };
 
   /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
@@ -850,38 +864,40 @@ static const yytype_uint8 yycheck[] =
 static const yytype_int8 yystos[] =
 {
        0,     5,     6,    11,    12,    13,    14,    15,    16,    17,
-      18,    22,    23,    24,    29,    30,    37,    39,    42,    62,
-      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
-      73,    74,    75,    80,    84,    85,    86,    87,    98,    99,
-     100,     8,    10,     8,    10,    19,    51,    52,    53,    54,
-      55,    57,    58,    82,    88,    89,    90,    88,    54,     9,
-      32,    34,    54,    54,    40,    63,     0,     3,   101,    54,
-      54,    54,    54,    89,    19,    31,    89,    21,    56,    57,
-      58,    59,    34,    54,    54,    37,    45,    41,    19,    38,
-      38,    20,    89,    54,    88,    89,    89,    89,    89,    54,
-      91,    92,    33,    35,    93,    54,    82,    55,    54,    77,
-      54,    54,    20,    21,    93,    19,    54,    82,    90,    94,
-      95,    45,    32,    25,    26,    27,    28,    79,    21,    76,
-      19,    92,     7,    97,    82,    45,    46,    47,    48,    49,
-      50,    96,    96,    36,    82,     8,    19,    77,    20,    54,
-       4,    21,    81,    82,    90,    82,    90,    94,    93,    54,
-      51,    78,    76,    43,    83,    20,    88,    82,    20,    20,
-      44,    81,    45,    54
+      18,    22,    23,    24,    29,    30,    44,    46,    49,    69,
+      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
+      80,    81,    82,    87,    91,    92,    93,    94,   106,   107,
+     108,     8,    10,     8,    10,    19,    31,    32,    33,    34,
+      35,    58,    59,    60,    61,    62,    64,    65,    89,    95,
+      96,    97,    98,    95,    61,     9,    39,    41,    61,    61,
+      47,    70,     0,     3,   109,    61,    61,    61,    61,    96,
+      38,    96,    21,    63,    64,    65,    66,    19,    41,    61,
+      61,    44,    52,    48,    19,    45,    45,    20,    61,    95,
+      96,    96,    96,    96,    20,    96,    61,    99,   100,    40,
+      42,   101,    61,    89,    62,    61,    84,    61,    61,    20,
+      21,    21,   101,    19,    89,    98,   102,   103,    52,    39,
+      25,    26,    27,    28,    86,    21,    83,    19,    95,   100,
+       7,   105,    89,    36,    37,    52,    53,    54,    55,    56,
+      57,   104,   104,    43,    89,     8,    19,    84,    20,    61,
+      20,     4,    21,    88,    89,    98,    89,    98,   102,   101,
+      61,    58,    85,    83,    50,    90,    20,    95,    89,    20,
+      20,    51,    88,    52,    61
 };
 
   /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
 static const yytype_int8 yyr1[] =
 {
-       0,    61,    62,    63,    63,    63,    63,    63,    63,    63,
-      63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
-      63,    63,    63,    64,    65,    66,    67,    68,    69,    70,
-      71,    72,    73,    74,    75,    76,    76,    77,    77,    78,
-      79,    79,    79,    79,    80,    81,    81,    82,    82,    82,
-      82,    83,    83,    84,    85,    86,    87,    88,    88,    89,
-      89,    89,    89,    89,    89,    89,    89,    89,    89,    90,
-      90,    91,    92,    92,    93,    93,    94,    94,    94,    95,
-      95,    95,    95,    96,    96,    96,    96,    96,    96,    97,
-      97,    98,    99,   100,   101,   101
+       0,    68,    69,    70,    70,    70,    70,    70,    70,    70,
+      70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
+      70,    70,    70,    71,    72,    73,    74,    75,    76,    77,
+      78,    79,    80,    81,    82,    83,    83,    84,    84,    85,
+      86,    86,    86,    86,    87,    88,    88,    89,    89,    89,
+      89,    90,    90,    91,    92,    93,    94,    95,    95,    96,
+      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
+      96,    97,    97,    97,    97,    97,    98,    98,    99,   100,
+     100,   101,   101,   102,   102,   102,   103,   103,   103,   103,
+     104,   104,   104,   104,   104,   104,   104,   104,   105,   105,
+     106,   107,   108,   109,   109
 };
 
   /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
@@ -893,10 +909,11 @@ static const yytype_int8 yyr2[] =
        2,     2,     8,     5,     8,     0,     3,     5,     2,     1,
        1,     1,     1,     1,     8,     0,     3,     1,     1,     1,
        1,     0,     4,     4,     7,     6,     2,     1,     3,     3,
-       3,     3,     3,     3,     2,     1,     1,     1,     4,     1,
-       3,     1,     1,     3,     0,     2,     0,     1,     3,     3,
-       3,     3,     3,     1,     1,     1,     1,     1,     1,     0,
-       3,     7,     2,     4,     0,     1
+       3,     3,     3,     3,     2,     1,     1,     1,     4,     3,
+       6,     1,     1,     1,     1,     1,     1,     3,     1,     1,
+       3,     0,     2,     0,     1,     3,     3,     3,     3,     3,
+       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
+       7,     2,     4,     0,     1
 };
 
 
@@ -1744,93 +1761,93 @@ yyreduce:
   switch (yyn)
     {
   case 2: /* commands: command_wrapper opt_semicolon  */
-#line 220 "yacc_sql.y"
+#line 227 "yacc_sql.y"
   {
     std::unique_ptr<ParsedSqlNode> sql_node = std::unique_ptr<ParsedSqlNode>((yyvsp[-1].sql_node));
     sql_result->add_sql_node(std::move(sql_node));
   }
-#line 1753 "yacc_sql.cpp"
+#line 1770 "yacc_sql.cpp"
     break;
 
   case 23: /* exit_stmt: EXIT  */
-#line 250 "yacc_sql.y"
+#line 257 "yacc_sql.y"
          {
       (void)yynerrs;  // 这么写为了消除yynerrs未使用的告警。如果你有更好的方法欢迎提PR
       (yyval.sql_node) = new ParsedSqlNode(SCF_EXIT);
     }
-#line 1762 "yacc_sql.cpp"
+#line 1779 "yacc_sql.cpp"
     break;
 
   case 24: /* help_stmt: HELP  */
-#line 256 "yacc_sql.y"
+#line 263 "yacc_sql.y"
          {
       (yyval.sql_node) = new ParsedSqlNode(SCF_HELP);
     }
-#line 1770 "yacc_sql.cpp"
+#line 1787 "yacc_sql.cpp"
     break;
 
   case 25: /* sync_stmt: SYNC  */
-#line 261 "yacc_sql.y"
+#line 268 "yacc_sql.y"
          {
       (yyval.sql_node) = new ParsedSqlNode(SCF_SYNC);
     }
-#line 1778 "yacc_sql.cpp"
+#line 1795 "yacc_sql.cpp"
     break;
 
   case 26: /* begin_stmt: TRX_BEGIN  */
-#line 267 "yacc_sql.y"
+#line 274 "yacc_sql.y"
                {
       (yyval.sql_node) = new ParsedSqlNode(SCF_BEGIN);
     }
-#line 1786 "yacc_sql.cpp"
+#line 1803 "yacc_sql.cpp"
     break;
 
   case 27: /* commit_stmt: TRX_COMMIT  */
-#line 273 "yacc_sql.y"
+#line 280 "yacc_sql.y"
                {
       (yyval.sql_node) = new ParsedSqlNode(SCF_COMMIT);
     }
-#line 1794 "yacc_sql.cpp"
+#line 1811 "yacc_sql.cpp"
     break;
 
   case 28: /* rollback_stmt: TRX_ROLLBACK  */
-#line 279 "yacc_sql.y"
+#line 286 "yacc_sql.y"
                   {
       (yyval.sql_node) = new ParsedSqlNode(SCF_ROLLBACK);
     }
-#line 1802 "yacc_sql.cpp"
+#line 1819 "yacc_sql.cpp"
     break;
 
   case 29: /* drop_table_stmt: DROP TABLE ID  */
-#line 285 "yacc_sql.y"
+#line 292 "yacc_sql.y"
                   {
       (yyval.sql_node) = new ParsedSqlNode(SCF_DROP_TABLE);
       (yyval.sql_node)->drop_table.relation_name = (yyvsp[0].string);
       free((yyvsp[0].string));
     }
-#line 1812 "yacc_sql.cpp"
+#line 1829 "yacc_sql.cpp"
     break;
 
   case 30: /* show_tables_stmt: SHOW TABLES  */
-#line 292 "yacc_sql.y"
+#line 299 "yacc_sql.y"
                 {
       (yyval.sql_node) = new ParsedSqlNode(SCF_SHOW_TABLES);
     }
-#line 1820 "yacc_sql.cpp"
+#line 1837 "yacc_sql.cpp"
     break;
 
   case 31: /* desc_table_stmt: DESC ID  */
-#line 298 "yacc_sql.y"
+#line 305 "yacc_sql.y"
              {
       (yyval.sql_node) = new ParsedSqlNode(SCF_DESC_TABLE);
       (yyval.sql_node)->desc_table.relation_name = (yyvsp[0].string);
       free((yyvsp[0].string));
     }
-#line 1830 "yacc_sql.cpp"
+#line 1847 "yacc_sql.cpp"
     break;
 
   case 32: /* create_index_stmt: CREATE INDEX ID ON ID LBRACE ID RBRACE  */
-#line 307 "yacc_sql.y"
+#line 314 "yacc_sql.y"
     {
       (yyval.sql_node) = new ParsedSqlNode(SCF_CREATE_INDEX);
       CreateIndexSqlNode &create_index = (yyval.sql_node)->create_index;
@@ -1841,11 +1858,11 @@ yyreduce:
       free((yyvsp[-3].string));
       free((yyvsp[-1].string));
     }
-#line 1845 "yacc_sql.cpp"
+#line 1862 "yacc_sql.cpp"
     break;
 
   case 33: /* drop_index_stmt: DROP INDEX ID ON ID  */
-#line 321 "yacc_sql.y"
+#line 328 "yacc_sql.y"
     {
       (yyval.sql_node) = new ParsedSqlNode(SCF_DROP_INDEX);
       (yyval.sql_node)->drop_index.index_name = (yyvsp[-2].string);
@@ -1853,11 +1870,11 @@ yyreduce:
       free((yyvsp[-2].string));
       free((yyvsp[0].string));
     }
-#line 1857 "yacc_sql.cpp"
+#line 1874 "yacc_sql.cpp"
     break;
 
   case 34: /* create_table_stmt: CREATE TABLE ID LBRACE attr_def attr_def_list RBRACE storage_format  */
-#line 331 "yacc_sql.y"
+#line 338 "yacc_sql.y"
     {
       (yyval.sql_node) = new ParsedSqlNode(SCF_CREATE_TABLE);
       CreateTableSqlNode &create_table = (yyval.sql_node)->create_table;
@@ -1878,19 +1895,19 @@ yyreduce:
         free((yyvsp[0].string));
       }
     }
-#line 1882 "yacc_sql.cpp"
+#line 1899 "yacc_sql.cpp"
     break;
 
   case 35: /* attr_def_list: %empty  */
-#line 354 "yacc_sql.y"
+#line 361 "yacc_sql.y"
     {
       (yyval.attr_infos) = nullptr;
     }
-#line 1890 "yacc_sql.cpp"
+#line 1907 "yacc_sql.cpp"
     break;
 
   case 36: /* attr_def_list: COMMA attr_def attr_def_list  */
-#line 358 "yacc_sql.y"
+#line 365 "yacc_sql.y"
     {
       if ((yyvsp[0].attr_infos) != nullptr) {
         (yyval.attr_infos) = (yyvsp[0].attr_infos);
@@ -1900,11 +1917,11 @@ yyreduce:
       (yyval.attr_infos)->emplace_back(*(yyvsp[-1].attr_info));
       delete (yyvsp[-1].attr_info);
     }
-#line 1904 "yacc_sql.cpp"
+#line 1921 "yacc_sql.cpp"
     break;
 
   case 37: /* attr_def: ID type LBRACE number RBRACE  */
-#line 371 "yacc_sql.y"
+#line 378 "yacc_sql.y"
     {
       (yyval.attr_info) = new AttrInfoSqlNode;
       (yyval.attr_info)->type = (AttrType)(yyvsp[-3].number);
@@ -1912,11 +1929,11 @@ yyreduce:
       (yyval.attr_info)->length = (yyvsp[-1].number);
       free((yyvsp[-4].string));
     }
-#line 1916 "yacc_sql.cpp"
+#line 1933 "yacc_sql.cpp"
     break;
 
   case 38: /* attr_def: ID type  */
-#line 379 "yacc_sql.y"
+#line 386 "yacc_sql.y"
     {
       (yyval.attr_info) = new AttrInfoSqlNode;
       (yyval.attr_info)->type = (AttrType)(yyvsp[0].number);
@@ -1925,41 +1942,41 @@ yyreduce:
       (yyval.attr_info)->length = 4;
       free((yyvsp[-1].string));
     }
-#line 1929 "yacc_sql.cpp"
+#line 1946 "yacc_sql.cpp"
     break;
 
   case 39: /* number: NUMBER  */
-#line 389 "yacc_sql.y"
+#line 396 "yacc_sql.y"
            {(yyval.number) = (yyvsp[0].number);}
-#line 1935 "yacc_sql.cpp"
+#line 1952 "yacc_sql.cpp"
     break;
 
   case 40: /* type: INT_T  */
-#line 392 "yacc_sql.y"
+#line 399 "yacc_sql.y"
                { (yyval.number) = static_cast<int>(AttrType::INTS); }
-#line 1941 "yacc_sql.cpp"
+#line 1958 "yacc_sql.cpp"
     break;
 
   case 41: /* type: STRING_T  */
-#line 393 "yacc_sql.y"
+#line 400 "yacc_sql.y"
                { (yyval.number) = static_cast<int>(AttrType::CHARS); }
-#line 1947 "yacc_sql.cpp"
+#line 1964 "yacc_sql.cpp"
     break;
 
   case 42: /* type: FLOAT_T  */
-#line 394 "yacc_sql.y"
+#line 401 "yacc_sql.y"
                { (yyval.number) = static_cast<int>(AttrType::FLOATS); }
-#line 1953 "yacc_sql.cpp"
+#line 1970 "yacc_sql.cpp"
     break;
 
   case 43: /* type: DATE_T  */
-#line 395 "yacc_sql.y"
+#line 402 "yacc_sql.y"
               { (yyval.number) = static_cast<int>(AttrType::DATES);}
-#line 1959 "yacc_sql.cpp"
+#line 1976 "yacc_sql.cpp"
     break;
 
   case 44: /* insert_stmt: INSERT INTO ID VALUES LBRACE value value_list RBRACE  */
-#line 399 "yacc_sql.y"
+#line 406 "yacc_sql.y"
     {
       (yyval.sql_node) = new ParsedSqlNode(SCF_INSERT);
       (yyval.sql_node)->insertion.relation_name = (yyvsp[-5].string);
@@ -1972,19 +1989,19 @@ yyreduce:
       delete (yyvsp[-2].value);
       free((yyvsp[-5].string));
     }
-#line 1976 "yacc_sql.cpp"
+#line 1993 "yacc_sql.cpp"
     break;
 
   case 45: /* value_list: %empty  */
-#line 415 "yacc_sql.y"
+#line 422 "yacc_sql.y"
     {
       (yyval.value_list) = nullptr;
     }
-#line 1984 "yacc_sql.cpp"
+#line 2001 "yacc_sql.cpp"
     break;
 
   case 46: /* value_list: COMMA value value_list  */
-#line 418 "yacc_sql.y"
+#line 425 "yacc_sql.y"
                               { 
       if ((yyvsp[0].value_list) != nullptr) {
         (yyval.value_list) = (yyvsp[0].value_list);
@@ -1994,72 +2011,71 @@ yyreduce:
       (yyval.value_list)->emplace_back(*(yyvsp[-1].value));
       delete (yyvsp[-1].value);
     }
-#line 1998 "yacc_sql.cpp"
+#line 2015 "yacc_sql.cpp"
     break;
 
   case 47: /* value: NUMBER  */
-#line 429 "yacc_sql.y"
+#line 436 "yacc_sql.y"
            {
       (yyval.value) = new Value((int)(yyvsp[0].number));
       (yyloc) = (yylsp[0]);
     }
-#line 2007 "yacc_sql.cpp"
+#line 2024 "yacc_sql.cpp"
     break;
 
   case 48: /* value: FLOAT  */
-#line 433 "yacc_sql.y"
+#line 440 "yacc_sql.y"
             {
       (yyval.value) = new Value((float)(yyvsp[0].floats));
       (yyloc) = (yylsp[0]);
     }
-#line 2016 "yacc_sql.cpp"
+#line 2033 "yacc_sql.cpp"
     break;
 
   case 49: /* value: DATE_STR  */
-#line 437 "yacc_sql.y"
+#line 444 "yacc_sql.y"
                {
       Value* val = new Value();
       char* tmp = common::substr((yyvsp[0].string), 1, strlen((yyvsp[0].string)) - 2);
       if(!init_date_value(val, tmp)) {
         parse_success_ = false;
       }
-      
       (yyval.value) = val;
       free(tmp);
       free((yyvsp[0].string));
     }
-#line 2032 "yacc_sql.cpp"
+#line 2048 "yacc_sql.cpp"
     break;
 
   case 50: /* value: SSS  */
-#line 448 "yacc_sql.y"
+#line 454 "yacc_sql.y"
           {
       char *tmp = common::substr((yyvsp[0].string), 1, strlen((yyvsp[0].string)) - 2);
       (yyval.value) = new Value(tmp);
       free(tmp);
       free((yyvsp[0].string));
     }
-#line 2043 "yacc_sql.cpp"
+#line 2059 "yacc_sql.cpp"
     break;
 
   case 51: /* storage_format: %empty  */
-#line 457 "yacc_sql.y"
+#line 463 "yacc_sql.y"
     {
       (yyval.string) = nullptr;
     }
-#line 2051 "yacc_sql.cpp"
+#line 2067 "yacc_sql.cpp"
     break;
 
   case 52: /* storage_format: STORAGE FORMAT EQ ID  */
-#line 461 "yacc_sql.y"
+#line 467 "yacc_sql.y"
     {
       (yyval.string) = (yyvsp[0].string);
     }
-#line 2059 "yacc_sql.cpp"
+#line 2075 "yacc_sql.cpp"
     break;
 
   case 53: /* delete_stmt: DELETE FROM ID where  */
-#line 468 "yacc_sql.y"
+#line 474 "yacc_sql.y"
     {
       (yyval.sql_node) = new ParsedSqlNode(SCF_DELETE);
       (yyval.sql_node)->deletion.relation_name = (yyvsp[-1].string);
@@ -2069,11 +2085,11 @@ yyreduce:
       }
       free((yyvsp[-1].string));
     }
-#line 2073 "yacc_sql.cpp"
+#line 2089 "yacc_sql.cpp"
     break;
 
   case 54: /* update_stmt: UPDATE ID SET ID EQ value where  */
-#line 480 "yacc_sql.y"
+#line 486 "yacc_sql.y"
     {
       (yyval.sql_node) = new ParsedSqlNode(SCF_UPDATE);
       (yyval.sql_node)->update.relation_name = (yyvsp[-5].string);
@@ -2086,11 +2102,11 @@ yyreduce:
       free((yyvsp[-5].string));
       free((yyvsp[-3].string));
     }
-#line 2090 "yacc_sql.cpp"
+#line 2106 "yacc_sql.cpp"
     break;
 
   case 55: /* select_stmt: SELECT expression_list FROM rel_list where group_by  */
-#line 495 "yacc_sql.y"
+#line 501 "yacc_sql.y"
     {
       (yyval.sql_node) = new ParsedSqlNode(SCF_SELECT);
       if ((yyvsp[-4].expression_list) != nullptr) {
@@ -2113,30 +2129,30 @@ yyreduce:
         delete (yyvsp[0].expression_list);
       }
     }
-#line 2117 "yacc_sql.cpp"
+#line 2133 "yacc_sql.cpp"
     break;
 
   case 56: /* calc_stmt: CALC expression_list  */
-#line 520 "yacc_sql.y"
+#line 526 "yacc_sql.y"
     {
       (yyval.sql_node) = new ParsedSqlNode(SCF_CALC);
       (yyval.sql_node)->calc.expressions.swap(*(yyvsp[0].expression_list));
       delete (yyvsp[0].expression_list);
     }
-#line 2127 "yacc_sql.cpp"
+#line 2143 "yacc_sql.cpp"
     break;
 
   case 57: /* expression_list: expression  */
-#line 529 "yacc_sql.y"
+#line 535 "yacc_sql.y"
     {
       (yyval.expression_list) = new std::vector<std::unique_ptr<Expression>>;
       (yyval.expression_list)->emplace_back((yyvsp[0].expression));
     }
-#line 2136 "yacc_sql.cpp"
+#line 2152 "yacc_sql.cpp"
     break;
 
   case 58: /* expression_list: expression COMMA expression_list  */
-#line 534 "yacc_sql.y"
+#line 540 "yacc_sql.y"
     {
       if ((yyvsp[0].expression_list) != nullptr) {
         (yyval.expression_list) = (yyvsp[0].expression_list);
@@ -2145,108 +2161,172 @@ yyreduce:
       }
       (yyval.expression_list)->emplace((yyval.expression_list)->begin(), (yyvsp[-2].expression));
     }
-#line 2149 "yacc_sql.cpp"
+#line 2165 "yacc_sql.cpp"
     break;
 
   case 59: /* expression: expression '+' expression  */
-#line 545 "yacc_sql.y"
+#line 551 "yacc_sql.y"
                               {
       (yyval.expression) = create_arithmetic_expression(ArithmeticExpr::Type::ADD, (yyvsp[-2].expression), (yyvsp[0].expression), sql_string, &(yyloc));
     }
-#line 2157 "yacc_sql.cpp"
+#line 2173 "yacc_sql.cpp"
     break;
 
   case 60: /* expression: expression '-' expression  */
-#line 548 "yacc_sql.y"
+#line 554 "yacc_sql.y"
                                 {
       (yyval.expression) = create_arithmetic_expression(ArithmeticExpr::Type::SUB, (yyvsp[-2].expression), (yyvsp[0].expression), sql_string, &(yyloc));
     }
-#line 2165 "yacc_sql.cpp"
+#line 2181 "yacc_sql.cpp"
     break;
 
   case 61: /* expression: expression '*' expression  */
-#line 551 "yacc_sql.y"
+#line 557 "yacc_sql.y"
                                 {
       (yyval.expression) = create_arithmetic_expression(ArithmeticExpr::Type::MUL, (yyvsp[-2].expression), (yyvsp[0].expression), sql_string, &(yyloc));
     }
-#line 2173 "yacc_sql.cpp"
+#line 2189 "yacc_sql.cpp"
     break;
 
   case 62: /* expression: expression '/' expression  */
-#line 554 "yacc_sql.y"
+#line 560 "yacc_sql.y"
                                 {
       (yyval.expression) = create_arithmetic_expression(ArithmeticExpr::Type::DIV, (yyvsp[-2].expression), (yyvsp[0].expression), sql_string, &(yyloc));
     }
-#line 2181 "yacc_sql.cpp"
+#line 2197 "yacc_sql.cpp"
     break;
 
   case 63: /* expression: LBRACE expression RBRACE  */
-#line 557 "yacc_sql.y"
+#line 563 "yacc_sql.y"
                                {
       (yyval.expression) = (yyvsp[-1].expression);
       (yyval.expression)->set_name(token_name(sql_string, &(yyloc)));
     }
-#line 2190 "yacc_sql.cpp"
+#line 2206 "yacc_sql.cpp"
     break;
 
   case 64: /* expression: '-' expression  */
-#line 561 "yacc_sql.y"
+#line 567 "yacc_sql.y"
                                   {
       (yyval.expression) = create_arithmetic_expression(ArithmeticExpr::Type::NEGATIVE, (yyvsp[0].expression), nullptr, sql_string, &(yyloc));
     }
-#line 2198 "yacc_sql.cpp"
+#line 2214 "yacc_sql.cpp"
     break;
 
   case 65: /* expression: value  */
-#line 564 "yacc_sql.y"
+#line 570 "yacc_sql.y"
             {
       (yyval.expression) = new ValueExpr(*(yyvsp[0].value));
       (yyval.expression)->set_name(token_name(sql_string, &(yyloc)));
       delete (yyvsp[0].value);
     }
-#line 2208 "yacc_sql.cpp"
+#line 2224 "yacc_sql.cpp"
     break;
 
   case 66: /* expression: rel_attr  */
-#line 569 "yacc_sql.y"
+#line 575 "yacc_sql.y"
                {
       RelAttrSqlNode *node = (yyvsp[0].rel_attr);
       (yyval.expression) = new UnboundFieldExpr(node->relation_name, node->attribute_name);
       (yyval.expression)->set_name(token_name(sql_string, &(yyloc)));
       delete (yyvsp[0].rel_attr);
     }
-#line 2219 "yacc_sql.cpp"
+#line 2235 "yacc_sql.cpp"
     break;
 
   case 67: /* expression: '*'  */
-#line 575 "yacc_sql.y"
+#line 581 "yacc_sql.y"
           {
       (yyval.expression) = new StarExpr();
     }
-#line 2227 "yacc_sql.cpp"
+#line 2243 "yacc_sql.cpp"
     break;
 
-  case 68: /* expression: ID LBRACE expression RBRACE  */
-#line 578 "yacc_sql.y"
-                                  {
-      (yyval.expression) = create_aggregate_expression((yyvsp[-3].string), (yyvsp[-1].expression), sql_string, &(yyloc));
-      free((yyvsp[-3].string));
+  case 68: /* expression: agg_func LBRACE expression RBRACE  */
+#line 584 "yacc_sql.y"
+                                        {
+      (yyval.expression) = create_aggregate_expression((yyvsp[-3].agg_func), (yyvsp[-1].expression), sql_string, &(yyloc));
+      free((yyvsp[-3].agg_func));
+    }
+#line 2252 "yacc_sql.cpp"
+    break;
+
+  case 69: /* expression: agg_func LBRACE RBRACE  */
+#line 588 "yacc_sql.y"
+                             {
+      (yyval.expression) = create_aggregate_expression((yyvsp[-2].agg_func), nullptr, sql_string, &(yyloc));
+      free((yyvsp[-2].agg_func));
+    }
+#line 2261 "yacc_sql.cpp"
+    break;
+
+  case 70: /* expression: agg_func LBRACE expression COMMA expression_list RBRACE  */
+#line 592 "yacc_sql.y"
+                                                              {
+      (yyval.expression) = create_aggregate_expression((yyvsp[-5].agg_func), (yyvsp[-3].expression), sql_string, &(yyloc));
+      parse_success_ = false;
+      free((yyvsp[-5].agg_func));
+    }
+#line 2271 "yacc_sql.cpp"
+    break;
+
+  case 71: /* agg_func: SUM_STR  */
+#line 600 "yacc_sql.y"
+            { 
+      (yyval.agg_func) = new char[4];
+      strcpy((yyval.agg_func), "SUM");
+    }
+#line 2280 "yacc_sql.cpp"
+    break;
+
+  case 72: /* agg_func: MIN_STR  */
+#line 604 "yacc_sql.y"
+              { 
+      (yyval.agg_func) = new char[4];
+      strcpy((yyval.agg_func), "MIN");
+    }
+#line 2289 "yacc_sql.cpp"
+    break;
+
+  case 73: /* agg_func: MAX_STR  */
+#line 608 "yacc_sql.y"
+              { 
+      (yyval.agg_func) = new char[4];
+      strcpy((yyval.agg_func), "MAX");
     }
-#line 2236 "yacc_sql.cpp"
+#line 2298 "yacc_sql.cpp"
+    break;
+
+  case 74: /* agg_func: AVG_STR  */
+#line 612 "yacc_sql.y"
+              { 
+      (yyval.agg_func) = new char[4];
+      strcpy((yyval.agg_func), "AVG");
+    }
+#line 2307 "yacc_sql.cpp"
     break;
 
-  case 69: /* rel_attr: ID  */
-#line 585 "yacc_sql.y"
+  case 75: /* agg_func: COUNT_STR  */
+#line 616 "yacc_sql.y"
+                { 
+      (yyval.agg_func) = new char[6];
+      strcpy((yyval.agg_func), "COUNT");
+    }
+#line 2316 "yacc_sql.cpp"
+    break;
+
+  case 76: /* rel_attr: ID  */
+#line 623 "yacc_sql.y"
        {
       (yyval.rel_attr) = new RelAttrSqlNode;
       (yyval.rel_attr)->attribute_name = (yyvsp[0].string);
       free((yyvsp[0].string));
     }
-#line 2246 "yacc_sql.cpp"
+#line 2326 "yacc_sql.cpp"
     break;
 
-  case 70: /* rel_attr: ID DOT ID  */
-#line 590 "yacc_sql.y"
+  case 77: /* rel_attr: ID DOT ID  */
+#line 628 "yacc_sql.y"
                 {
       (yyval.rel_attr) = new RelAttrSqlNode;
       (yyval.rel_attr)->relation_name  = (yyvsp[-2].string);
@@ -2254,29 +2334,29 @@ yyreduce:
       free((yyvsp[-2].string));
       free((yyvsp[0].string));
     }
-#line 2258 "yacc_sql.cpp"
+#line 2338 "yacc_sql.cpp"
     break;
 
-  case 71: /* relation: ID  */
-#line 600 "yacc_sql.y"
+  case 78: /* relation: ID  */
+#line 638 "yacc_sql.y"
        {
       (yyval.string) = (yyvsp[0].string);
     }
-#line 2266 "yacc_sql.cpp"
+#line 2346 "yacc_sql.cpp"
     break;
 
-  case 72: /* rel_list: relation  */
-#line 605 "yacc_sql.y"
+  case 79: /* rel_list: relation  */
+#line 643 "yacc_sql.y"
              {
       (yyval.relation_list) = new std::vector<std::string>();
       (yyval.relation_list)->push_back((yyvsp[0].string));
       free((yyvsp[0].string));
     }
-#line 2276 "yacc_sql.cpp"
+#line 2356 "yacc_sql.cpp"
     break;
 
-  case 73: /* rel_list: relation COMMA rel_list  */
-#line 610 "yacc_sql.y"
+  case 80: /* rel_list: relation COMMA rel_list  */
+#line 648 "yacc_sql.y"
                               {
       if ((yyvsp[0].relation_list) != nullptr) {
         (yyval.relation_list) = (yyvsp[0].relation_list);
@@ -2287,55 +2367,55 @@ yyreduce:
       (yyval.relation_list)->insert((yyval.relation_list)->begin(), (yyvsp[-2].string));
       free((yyvsp[-2].string));
     }
-#line 2291 "yacc_sql.cpp"
+#line 2371 "yacc_sql.cpp"
     break;
 
-  case 74: /* where: %empty  */
-#line 624 "yacc_sql.y"
+  case 81: /* where: %empty  */
+#line 662 "yacc_sql.y"
     {
       (yyval.condition_list) = nullptr;
     }
-#line 2299 "yacc_sql.cpp"
+#line 2379 "yacc_sql.cpp"
     break;
 
-  case 75: /* where: WHERE condition_list  */
-#line 627 "yacc_sql.y"
+  case 82: /* where: WHERE condition_list  */
+#line 665 "yacc_sql.y"
                            {
       (yyval.condition_list) = (yyvsp[0].condition_list);  
     }
-#line 2307 "yacc_sql.cpp"
+#line 2387 "yacc_sql.cpp"
     break;
 
-  case 76: /* condition_list: %empty  */
-#line 633 "yacc_sql.y"
+  case 83: /* condition_list: %empty  */
+#line 671 "yacc_sql.y"
     {
       (yyval.condition_list) = nullptr;
     }
-#line 2315 "yacc_sql.cpp"
+#line 2395 "yacc_sql.cpp"
     break;
 
-  case 77: /* condition_list: condition  */
-#line 636 "yacc_sql.y"
+  case 84: /* condition_list: condition  */
+#line 674 "yacc_sql.y"
                 {
       (yyval.condition_list) = new std::vector<ConditionSqlNode>;
       (yyval.condition_list)->emplace_back(*(yyvsp[0].condition));
       delete (yyvsp[0].condition);
     }
-#line 2325 "yacc_sql.cpp"
+#line 2405 "yacc_sql.cpp"
     break;
 
-  case 78: /* condition_list: condition AND condition_list  */
-#line 641 "yacc_sql.y"
+  case 85: /* condition_list: condition AND condition_list  */
+#line 679 "yacc_sql.y"
                                    {
       (yyval.condition_list) = (yyvsp[0].condition_list);
       (yyval.condition_list)->emplace_back(*(yyvsp[-2].condition));
       delete (yyvsp[-2].condition);
     }
-#line 2335 "yacc_sql.cpp"
+#line 2415 "yacc_sql.cpp"
     break;
 
-  case 79: /* condition: rel_attr comp_op value  */
-#line 649 "yacc_sql.y"
+  case 86: /* condition: rel_attr comp_op value  */
+#line 687 "yacc_sql.y"
     {
       (yyval.condition) = new ConditionSqlNode;
       (yyval.condition)->left_is_attr = 1;
@@ -2347,11 +2427,11 @@ yyreduce:
       delete (yyvsp[-2].rel_attr);
       delete (yyvsp[0].value);
     }
-#line 2351 "yacc_sql.cpp"
+#line 2431 "yacc_sql.cpp"
     break;
 
-  case 80: /* condition: value comp_op value  */
-#line 661 "yacc_sql.y"
+  case 87: /* condition: value comp_op value  */
+#line 699 "yacc_sql.y"
     {
       (yyval.condition) = new ConditionSqlNode;
       (yyval.condition)->left_is_attr = 0;
@@ -2363,11 +2443,11 @@ yyreduce:
       delete (yyvsp[-2].value);
       delete (yyvsp[0].value);
     }
-#line 2367 "yacc_sql.cpp"
+#line 2447 "yacc_sql.cpp"
     break;
 
-  case 81: /* condition: rel_attr comp_op rel_attr  */
-#line 673 "yacc_sql.y"
+  case 88: /* condition: rel_attr comp_op rel_attr  */
+#line 711 "yacc_sql.y"
     {
       (yyval.condition) = new ConditionSqlNode;
       (yyval.condition)->left_is_attr = 1;
@@ -2379,11 +2459,11 @@ yyreduce:
       delete (yyvsp[-2].rel_attr);
       delete (yyvsp[0].rel_attr);
     }
-#line 2383 "yacc_sql.cpp"
+#line 2463 "yacc_sql.cpp"
     break;
 
-  case 82: /* condition: value comp_op rel_attr  */
-#line 685 "yacc_sql.y"
+  case 89: /* condition: value comp_op rel_attr  */
+#line 723 "yacc_sql.y"
     {
       (yyval.condition) = new ConditionSqlNode;
       (yyval.condition)->left_is_attr = 0;
@@ -2395,63 +2475,75 @@ yyreduce:
       delete (yyvsp[-2].value);
       delete (yyvsp[0].rel_attr);
     }
-#line 2399 "yacc_sql.cpp"
+#line 2479 "yacc_sql.cpp"
     break;
 
-  case 83: /* comp_op: EQ  */
-#line 699 "yacc_sql.y"
+  case 90: /* comp_op: EQ  */
+#line 737 "yacc_sql.y"
          { (yyval.comp) = EQUAL_TO; }
-#line 2405 "yacc_sql.cpp"
+#line 2485 "yacc_sql.cpp"
     break;
 
-  case 84: /* comp_op: LT  */
-#line 700 "yacc_sql.y"
+  case 91: /* comp_op: LT  */
+#line 738 "yacc_sql.y"
          { (yyval.comp) = LESS_THAN; }
-#line 2411 "yacc_sql.cpp"
+#line 2491 "yacc_sql.cpp"
     break;
 
-  case 85: /* comp_op: GT  */
-#line 701 "yacc_sql.y"
+  case 92: /* comp_op: GT  */
+#line 739 "yacc_sql.y"
          { (yyval.comp) = GREAT_THAN; }
-#line 2417 "yacc_sql.cpp"
+#line 2497 "yacc_sql.cpp"
     break;
 
-  case 86: /* comp_op: LE  */
-#line 702 "yacc_sql.y"
+  case 93: /* comp_op: LE  */
+#line 740 "yacc_sql.y"
          { (yyval.comp) = LESS_EQUAL; }
-#line 2423 "yacc_sql.cpp"
+#line 2503 "yacc_sql.cpp"
     break;
 
-  case 87: /* comp_op: GE  */
-#line 703 "yacc_sql.y"
+  case 94: /* comp_op: GE  */
+#line 741 "yacc_sql.y"
          { (yyval.comp) = GREAT_EQUAL; }
-#line 2429 "yacc_sql.cpp"
+#line 2509 "yacc_sql.cpp"
     break;
 
-  case 88: /* comp_op: NE  */
-#line 704 "yacc_sql.y"
+  case 95: /* comp_op: NE  */
+#line 742 "yacc_sql.y"
          { (yyval.comp) = NOT_EQUAL; }
-#line 2435 "yacc_sql.cpp"
+#line 2515 "yacc_sql.cpp"
+    break;
+
+  case 96: /* comp_op: LIKE_STR  */
+#line 743 "yacc_sql.y"
+               { (yyval.comp) = LIKE; }
+#line 2521 "yacc_sql.cpp"
     break;
 
-  case 89: /* group_by: %empty  */
-#line 710 "yacc_sql.y"
+  case 97: /* comp_op: NOT_LIKE_STR  */
+#line 744 "yacc_sql.y"
+                   { (yyval.comp) = NOT_LIKE; }
+#line 2527 "yacc_sql.cpp"
+    break;
+
+  case 98: /* group_by: %empty  */
+#line 750 "yacc_sql.y"
     {
       (yyval.expression_list) = nullptr;
     }
-#line 2443 "yacc_sql.cpp"
+#line 2535 "yacc_sql.cpp"
     break;
 
-  case 90: /* group_by: GROUP BY expression_list  */
-#line 714 "yacc_sql.y"
+  case 99: /* group_by: GROUP BY expression_list  */
+#line 754 "yacc_sql.y"
     {
       (yyval.expression_list) = (yyvsp[0].expression_list);
     }
-#line 2451 "yacc_sql.cpp"
+#line 2543 "yacc_sql.cpp"
     break;
 
-  case 91: /* load_data_stmt: LOAD DATA INFILE SSS INTO TABLE ID  */
-#line 720 "yacc_sql.y"
+  case 100: /* load_data_stmt: LOAD DATA INFILE SSS INTO TABLE ID  */
+#line 760 "yacc_sql.y"
     {
       char *tmp_file_name = common::substr((yyvsp[-3].string), 1, strlen((yyvsp[-3].string)) - 2);
       
@@ -2461,20 +2553,20 @@ yyreduce:
       free((yyvsp[0].string));
       free(tmp_file_name);
     }
-#line 2465 "yacc_sql.cpp"
+#line 2557 "yacc_sql.cpp"
     break;
 
-  case 92: /* explain_stmt: EXPLAIN command_wrapper  */
-#line 733 "yacc_sql.y"
+  case 101: /* explain_stmt: EXPLAIN command_wrapper  */
+#line 773 "yacc_sql.y"
     {
       (yyval.sql_node) = new ParsedSqlNode(SCF_EXPLAIN);
       (yyval.sql_node)->explain.sql_node = std::unique_ptr<ParsedSqlNode>((yyvsp[0].sql_node));
     }
-#line 2474 "yacc_sql.cpp"
+#line 2566 "yacc_sql.cpp"
     break;
 
-  case 93: /* set_variable_stmt: SET ID EQ value  */
-#line 741 "yacc_sql.y"
+  case 102: /* set_variable_stmt: SET ID EQ value  */
+#line 781 "yacc_sql.y"
     {
       (yyval.sql_node) = new ParsedSqlNode(SCF_SET_VARIABLE);
       (yyval.sql_node)->set_variable.name  = (yyvsp[-2].string);
@@ -2482,11 +2574,11 @@ yyreduce:
       free((yyvsp[-2].string));
       delete (yyvsp[0].value);
     }
-#line 2486 "yacc_sql.cpp"
+#line 2578 "yacc_sql.cpp"
     break;
 
 
-#line 2490 "yacc_sql.cpp"
+#line 2582 "yacc_sql.cpp"
 
       default: break;
     }
@@ -2716,7 +2808,7 @@ yyreturn:
   return yyresult;
 }
 
-#line 753 "yacc_sql.y"
+#line 793 "yacc_sql.y"
 
 //_____________________________________________________________________
 extern void scan_string(const char *str, yyscan_t scanner);
diff --git a/src/observer/sql/parser/yacc_sql.hpp b/src/observer/sql/parser/yacc_sql.hpp
index 9df926c..5ff49c8 100644
--- a/src/observer/sql/parser/yacc_sql.hpp
+++ b/src/observer/sql/parser/yacc_sql.hpp
@@ -82,32 +82,39 @@ extern int yydebug;
     DATE_T = 283,                  /* DATE_T  */
     HELP = 284,                    /* HELP  */
     EXIT = 285,                    /* EXIT  */
-    DOT = 286,                     /* DOT  */
-    INTO = 287,                    /* INTO  */
-    VALUES = 288,                  /* VALUES  */
-    FROM = 289,                    /* FROM  */
-    WHERE = 290,                   /* WHERE  */
-    AND = 291,                     /* AND  */
-    SET = 292,                     /* SET  */
-    ON = 293,                      /* ON  */
-    LOAD = 294,                    /* LOAD  */
-    DATA = 295,                    /* DATA  */
-    INFILE = 296,                  /* INFILE  */
-    EXPLAIN = 297,                 /* EXPLAIN  */
-    STORAGE = 298,                 /* STORAGE  */
-    FORMAT = 299,                  /* FORMAT  */
-    EQ = 300,                      /* EQ  */
-    LT = 301,                      /* LT  */
-    GT = 302,                      /* GT  */
-    LE = 303,                      /* LE  */
-    GE = 304,                      /* GE  */
-    NE = 305,                      /* NE  */
-    NUMBER = 306,                  /* NUMBER  */
-    FLOAT = 307,                   /* FLOAT  */
-    DATE_STR = 308,                /* DATE_STR  */
-    ID = 309,                      /* ID  */
-    SSS = 310,                     /* SSS  */
-    UMINUS = 311                   /* UMINUS  */
+    SUM_STR = 286,                 /* SUM_STR  */
+    MIN_STR = 287,                 /* MIN_STR  */
+    MAX_STR = 288,                 /* MAX_STR  */
+    AVG_STR = 289,                 /* AVG_STR  */
+    COUNT_STR = 290,               /* COUNT_STR  */
+    LIKE_STR = 291,                /* LIKE_STR  */
+    NOT_LIKE_STR = 292,            /* NOT_LIKE_STR  */
+    DOT = 293,                     /* DOT  */
+    INTO = 294,                    /* INTO  */
+    VALUES = 295,                  /* VALUES  */
+    FROM = 296,                    /* FROM  */
+    WHERE = 297,                   /* WHERE  */
+    AND = 298,                     /* AND  */
+    SET = 299,                     /* SET  */
+    ON = 300,                      /* ON  */
+    LOAD = 301,                    /* LOAD  */
+    DATA = 302,                    /* DATA  */
+    INFILE = 303,                  /* INFILE  */
+    EXPLAIN = 304,                 /* EXPLAIN  */
+    STORAGE = 305,                 /* STORAGE  */
+    FORMAT = 306,                  /* FORMAT  */
+    EQ = 307,                      /* EQ  */
+    LT = 308,                      /* LT  */
+    GT = 309,                      /* GT  */
+    LE = 310,                      /* LE  */
+    GE = 311,                      /* GE  */
+    NE = 312,                      /* NE  */
+    NUMBER = 313,                  /* NUMBER  */
+    FLOAT = 314,                   /* FLOAT  */
+    DATE_STR = 315,                /* DATE_STR  */
+    ID = 316,                      /* ID  */
+    SSS = 317,                     /* SSS  */
+    UMINUS = 318                   /* UMINUS  */
   };
   typedef enum yytokentype yytoken_kind_t;
 #endif
@@ -116,7 +123,7 @@ extern int yydebug;
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 union YYSTYPE
 {
-#line 146 "yacc_sql.y"
+#line 151 "yacc_sql.y"
 
   ParsedSqlNode *                            sql_node;
   ConditionSqlNode *                         condition;
@@ -134,8 +141,9 @@ union YYSTYPE
   char *                                     string;
   int                                        number;
   float                                      floats;
+  char*                                      agg_func;
 
-#line 139 "yacc_sql.hpp"
+#line 147 "yacc_sql.hpp"
 
 };
 typedef union YYSTYPE YYSTYPE;
diff --git a/src/observer/sql/parser/yacc_sql.y b/src/observer/sql/parser/yacc_sql.y
index 2bce70c..95935ad 100644
--- a/src/observer/sql/parser/yacc_sql.y
+++ b/src/observer/sql/parser/yacc_sql.y
@@ -38,12 +38,10 @@ bool check_date(int y, int m, int d) {
 bool init_date_value(Value* value, const char* v) {
     int y, m, d;
     sscanf(v, "%d-%d-%d", &y, &m, &d);
-    // std::cout << "666 " << y << " " << m << " " << d << std::endl;
     bool b = check_date(y, m, d);
     if(!b) {
       return false;
     }
-    // std::cout << "888 " << y << " " << m << " " << d << std::endl;
     int tmp = y * 10000 + m * 100 + d;
     value->set_date(tmp);
     return true;
@@ -121,6 +119,13 @@ UnboundAggregateExpr *create_aggregate_expression(const char *aggregate_name,
         DATE_T
         HELP
         EXIT
+        SUM_STR
+        MIN_STR
+        MAX_STR
+        AVG_STR
+        COUNT_STR
+        LIKE_STR
+        NOT_LIKE_STR
         DOT //QUOTE
         INTO
         VALUES
@@ -160,6 +165,7 @@ UnboundAggregateExpr *create_aggregate_expression(const char *aggregate_name,
   char *                                     string;
   int                                        number;
   float                                      floats;
+  char*                                      agg_func;
 }
 
 %token <number> NUMBER
@@ -170,6 +176,7 @@ UnboundAggregateExpr *create_aggregate_expression(const char *aggregate_name,
 //非终结符
 
 /** type 定义了各种解析后的结果输出的是什么类型。类型对应了 union 中的定义的成员变量名称 **/
+%type <agg_func>            agg_func
 %type <number>              type
 %type <condition>           condition
 %type <value>               value
@@ -440,7 +447,6 @@ value:
       if(!init_date_value(val, tmp)) {
         parse_success_ = false;
       }
-      
       $$ = val;
       free(tmp);
       free($1);
@@ -575,10 +581,42 @@ expression:
     | '*' {
       $$ = new StarExpr();
     }
-    | ID LBRACE expression RBRACE {
+    | agg_func LBRACE expression RBRACE {
       $$ = create_aggregate_expression($1, $3, sql_string, &@$);
       free($1);
     }
+    | agg_func LBRACE RBRACE {
+      $$ = create_aggregate_expression($1, nullptr, sql_string, &@$);
+      free($1);
+    }
+    | agg_func LBRACE expression COMMA expression_list RBRACE {
+      $$ = create_aggregate_expression($1, $3, sql_string, &@$);
+      parse_success_ = false;
+      free($1);
+    }
+    ;
+
+agg_func:
+    SUM_STR { 
+      $$ = new char[4];
+      strcpy($$, "SUM");
+    }
+    | MIN_STR { 
+      $$ = new char[4];
+      strcpy($$, "MIN");
+    }
+    | MAX_STR { 
+      $$ = new char[4];
+      strcpy($$, "MAX");
+    }
+    | AVG_STR { 
+      $$ = new char[4];
+      strcpy($$, "AVG");
+    }
+    | COUNT_STR { 
+      $$ = new char[6];
+      strcpy($$, "COUNT");
+    }
     ;
 
 rel_attr:
@@ -702,6 +740,8 @@ comp_op:
     | LE { $$ = LESS_EQUAL; }
     | GE { $$ = GREAT_EQUAL; }
     | NE { $$ = NOT_EQUAL; }
+    | LIKE_STR { $$ = LIKE; }
+    | NOT_LIKE_STR { $$ = NOT_LIKE; }
     ;
 
 // your code here
diff --git a/src/observer/sql/stmt/filter_stmt.cpp b/src/observer/sql/stmt/filter_stmt.cpp
index 7cee72e..3b4f0e8 100644
--- a/src/observer/sql/stmt/filter_stmt.cpp
+++ b/src/observer/sql/stmt/filter_stmt.cpp
@@ -37,7 +37,6 @@ RC FilterStmt::create(Db *db, Table *default_table, std::unordered_map<std::stri
   for (int i = 0; i < condition_num; i++) {
     FilterUnit *filter_unit = nullptr;
     rc = create_filter_unit(db, default_table, tables, conditions[i], filter_unit);
-    
     if (rc != RC::SUCCESS) {
       delete tmp_stmt;
       LOG_WARN("failed to create filter unit. condition index=%d", i);
@@ -131,12 +130,19 @@ RC FilterStmt::create_filter_unit(Db *db, Table *default_table, std::unordered_m
 
   filter_unit->set_comp(comp);
 
-  // 检查两个类型是否能够比较
-  // need to judge date type here
-  // for example, WHERE c1='2000-12-07', c1(date type)
+  // check compare is valid here
   if(lt == AttrType::DATES && rt == AttrType::CHARS) {
     return RC::INVALID_ARGUMENT;
   }
+  // here, not support "col LIKE col" and "chars LIKE chars".
+  if(condition.comp == LIKE || condition.comp == NOT_LIKE) {
+    if(!condition.right_is_attr && !condition.left_is_attr) {
+      return RC::INVALID_ARGUMENT;
+    }
+    if(condition.right_is_attr && condition.left_is_attr) {
+      return RC::INVALID_ARGUMENT;
+    }
+  }
 
   return rc;
 }
diff --git a/src/observer/sql/stmt/select_stmt.cpp b/src/observer/sql/stmt/select_stmt.cpp
index 3a6b0d5..a51d9e7 100644
--- a/src/observer/sql/stmt/select_stmt.cpp
+++ b/src/observer/sql/stmt/select_stmt.cpp
@@ -100,8 +100,6 @@ RC SelectStmt::create(Db *db, SelectSqlNode &select_sql, Stmt *&stmt)
     return rc;
   }
 
-  std::cout << "select's filter stmt" << std::endl;
-
   // everything alright
   SelectStmt *select_stmt = new SelectStmt();
 
diff --git a/src/observer/sql/stmt/update_stmt.cpp b/src/observer/sql/stmt/update_stmt.cpp
index ca2a357..bd661a2 100644
--- a/src/observer/sql/stmt/update_stmt.cpp
+++ b/src/observer/sql/stmt/update_stmt.cpp
@@ -48,6 +48,19 @@ RC UpdateStmt::create(Db *db, const UpdateSqlNode &update_sql, Stmt *&stmt)
     return RC::SCHEMA_TABLE_NOT_EXIST;
   }
 
+  bool found_column = false;
+  // check whether the column exists
+  auto field_metas = *table->table_meta().field_metas();
+  for(auto mt : field_metas) {
+    if(mt.name() == update_sql.attribute_name) {
+      found_column = true;
+      break;
+    }
+  }
+  if(!found_column) {
+    return RC::INVALID_ARGUMENT;
+  }
+
   std::unordered_map<std::string, Table *> table_map;
   table_map.insert(std::pair<std::string, Table *>(std::string(table_name), table));
 
diff --git a/src/observer/storage/common/condition_filter.cpp b/src/observer/storage/common/condition_filter.cpp
index 47caa6d..fe2329f 100644
--- a/src/observer/storage/common/condition_filter.cpp
+++ b/src/observer/storage/common/condition_filter.cpp
@@ -145,10 +145,9 @@ bool DefaultConditionFilter::filter(const Record &rec) const
     case LESS_THAN: return cmp_result < 0;
     case GREAT_EQUAL: return cmp_result >= 0;
     case GREAT_THAN: return cmp_result > 0;
-
-    default: break;
+    default: 
+      break;
   }
-
   LOG_PANIC("Never should print this.");
   return cmp_result;  // should not go here
 }
diff --git a/src/observer/storage/table/table.cpp b/src/observer/storage/table/table.cpp
index 8ffbdfd..7997b35 100644
--- a/src/observer/storage/table/table.cpp
+++ b/src/observer/storage/table/table.cpp
@@ -250,13 +250,12 @@ RC Table::insert_record(Record &record)
 }
 
 // update record here
-RC Table::update_record(Record &record, Record new_record) {
+RC Table::update_record(Record &record, Record& new_record) {
   RC rc = RC::SUCCESS;
-  // delete from file first
-  // also delete from index
+  // delete from file first, also delete from index
   rc = delete_record(record);
-  // insert the new record
-  // insert into index
+  if(OB_FAIL(rc)) return rc;
+  // insert the new record, also insert into index
   rc = insert_record(new_record);
   return rc;
 }
diff --git a/src/observer/storage/table/table.h b/src/observer/storage/table/table.h
index 91baf8e..ad59e6d 100644
--- a/src/observer/storage/table/table.h
+++ b/src/observer/storage/table/table.h
@@ -78,7 +78,7 @@ public:
   RC insert_record(Record &record);
   RC delete_record(const Record &record);
   RC delete_record(const RID &rid);
-  RC update_record(Record &record, Record new_record);
+  RC update_record(Record &record, Record& new_record);
   RC get_record(const RID &rid, Record &record);
 
   RC destroy(const char* dir);
diff --git a/src/observer/storage/trx/mvcc_trx.cpp b/src/observer/storage/trx/mvcc_trx.cpp
index 32cfcf5..d82c5d0 100644
--- a/src/observer/storage/trx/mvcc_trx.cpp
+++ b/src/observer/storage/trx/mvcc_trx.cpp
@@ -148,8 +148,11 @@ RC MvccTrx::insert_record(Table *table, Record &record)
   return rc;
 }
 
-RC MvccTrx::update_record(Table *table, Record &record, Record new_record){
-  return RC::SUCCESS;
+RC MvccTrx::update_record(Table *table, Record &record, Record& new_record){
+  RC rc = RC::SUCCESS;
+  rc = delete_record(table, record);
+  rc = insert_record(table, new_record);
+  return rc;
 }
 
 RC MvccTrx::delete_record(Table *table, Record &record)
diff --git a/src/observer/storage/trx/mvcc_trx.h b/src/observer/storage/trx/mvcc_trx.h
index a98107b..ba24760 100644
--- a/src/observer/storage/trx/mvcc_trx.h
+++ b/src/observer/storage/trx/mvcc_trx.h
@@ -78,7 +78,7 @@ public:
 
   RC insert_record(Table *table, Record &record) override;
   RC delete_record(Table *table, Record &record) override;
-  RC update_record(Table *table, Record &record, Record new_record) override;
+  RC update_record(Table *table, Record &record, Record &new_record) override;
 
 
   /**
diff --git a/src/observer/storage/trx/trx.h b/src/observer/storage/trx/trx.h
index 8d03353..0e64504 100644
--- a/src/observer/storage/trx/trx.h
+++ b/src/observer/storage/trx/trx.h
@@ -145,7 +145,7 @@ public:
 
   virtual RC insert_record(Table *table, Record &record)                    = 0;
   virtual RC delete_record(Table *table, Record &record)                    = 0;
-  virtual RC update_record(Table *table, Record &record, Record new_record) = 0;
+  virtual RC update_record(Table *table, Record &record, Record &new_record) = 0;
   virtual RC visit_record(Table *table, Record &record, ReadWriteMode mode) = 0;
 
   virtual RC start_if_need() = 0;
diff --git a/src/observer/storage/trx/vacuous_trx.cpp b/src/observer/storage/trx/vacuous_trx.cpp
index 0f4c2ea..fdc2fcf 100644
--- a/src/observer/storage/trx/vacuous_trx.cpp
+++ b/src/observer/storage/trx/vacuous_trx.cpp
@@ -36,7 +36,7 @@ RC VacuousTrx::insert_record(Table *table, Record &record) { return table->inser
 
 RC VacuousTrx::delete_record(Table *table, Record &record) { return table->delete_record(record); }
 
-RC VacuousTrx::update_record(Table *table, Record &record, Record new_record) { return table->update_record(record, new_record); }
+RC VacuousTrx::update_record(Table *table, Record &record, Record& new_record) { return table->update_record(record, new_record); }
 
 RC VacuousTrx::visit_record(Table *table, Record &record, ReadWriteMode) { return RC::SUCCESS; }
 
diff --git a/src/observer/storage/trx/vacuous_trx.h b/src/observer/storage/trx/vacuous_trx.h
index 7610d72..3fff3c2 100644
--- a/src/observer/storage/trx/vacuous_trx.h
+++ b/src/observer/storage/trx/vacuous_trx.h
@@ -46,7 +46,7 @@ public:
 
   RC insert_record(Table *table, Record &record) override;
   RC delete_record(Table *table, Record &record) override;
-  RC update_record(Table *table, Record &record, Record new_record) override;
+  RC update_record(Table *table, Record &record, Record &new_record) override;
   RC visit_record(Table *table, Record &record, ReadWriteMode mode) override;
   RC start_if_need() override;
   RC commit() override;
